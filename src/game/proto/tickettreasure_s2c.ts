// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_ticket_treasure_add_record_request extends Sproto.SprotoTypeBase {
		
		public treasureRecord: treasure_record; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.treasureRecord = this.de.ro(treasure_record);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.treasureRecord != undefined) {
				this.se.wo (this.treasureRecord, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_ticket_treasure_base_info_request extends Sproto.SprotoTypeBase {
		
		public treasureCnt: number; // tag 0
		public luckyValue: number; // tag 1
		public awardValue: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.treasureCnt = this.de.ri ();
					break;
				case 1:
					this.luckyValue = this.de.ri ();
					break;
				case 2:
					this.awardValue = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.treasureCnt != undefined) {
				this.se.wi (this.treasureCnt, 0);
			}

			if (this.luckyValue != undefined) {
				this.se.wi (this.luckyValue, 1);
			}

			if (this.awardValue != undefined) {
				this.se.wi (this.awardValue, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_ticket_treasure_hunt_result_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public items: treasure_item[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.items = this.de.roa(treasure_item);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.items != undefined) {
				this.se.woa (this.items, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_ticket_treasure_record_datas_request extends Sproto.SprotoTypeBase {
		
		public treasureRecord: treasure_record[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.treasureRecord = this.de.roa(treasure_record);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.treasureRecord != undefined) {
				this.se.woa (this.treasureRecord, 0);
			}

			return this.se.Close ();
		}
	}


}

