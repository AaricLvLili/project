// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class monopoly_buff extends Sproto.SprotoTypeBase {
		
		public items: monopoly_item[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.items = this.de.roa(monopoly_item);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.items != undefined) {
				this.se.woa (this.items, 0);
			}

			return this.se.Close ();
		}
	}


	export class monopoly_item extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public num: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.num = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.num != undefined) {
				this.se.wi (this.num, 1);
			}

			return this.se.Close ();
		}
	}


	export class monopoly_log_item extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public num: number; // tag 1
		public reason: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.num = this.de.ri ();
					break;
				case 2:
					this.reason = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.num != undefined) {
				this.se.wi (this.num, 1);
			}

			if (this.reason != undefined) {
				this.se.wi (this.reason, 2);
			}

			return this.se.Close ();
		}
	}


	export class monopoly_rank_item extends Sproto.SprotoTypeBase {
		
		public name: string; // tag 0
		public guild: string; // tag 1
		public lvl: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.name = this.de.rs ();
					break;
				case 1:
					this.guild = this.de.rs ();
					break;
				case 2:
					this.lvl = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.name != undefined) {
				this.se.ws (this.name, 0);
			}

			if (this.guild != undefined) {
				this.se.ws (this.guild, 1);
			}

			if (this.lvl != undefined) {
				this.se.wi (this.lvl, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_buy_res_request extends Sproto.SprotoTypeBase {
		
		public typ: number; // tag 0
		public num: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.typ = this.de.ri ();
					break;
				case 1:
					this.num = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.typ != undefined) {
				this.se.wi (this.typ, 0);
			}

			if (this.num != undefined) {
				this.se.wi (this.num, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_dice_res_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public num: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.num = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.num != undefined) {
				this.se.wia (this.num, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_exchange_res_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_getitem_res_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_log_res_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public num: number; // tag 1
		public reason: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.num = this.de.ri ();
					break;
				case 2:
					this.reason = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.num != undefined) {
				this.se.wi (this.num, 1);
			}

			if (this.reason != undefined) {
				this.se.wi (this.reason, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_nextlvl_res_request extends Sproto.SprotoTypeBase {
		
		public grid: monopoly_item[]; // tag 0
		public curnum: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.grid = this.de.roa(monopoly_item);
					break;
				case 1:
					this.curnum = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.grid != undefined) {
				this.se.woa (this.grid, 0);
			}

			if (this.curnum != undefined) {
				this.se.wi (this.curnum, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_rank_res_request extends Sproto.SprotoTypeBase {
		
		public data: monopoly_rank_item[]; // tag 0
		public rank: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.roa(monopoly_rank_item);
					break;
				case 1:
					this.rank = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.woa (this.data, 0);
			}

			if (this.rank != undefined) {
				this.se.wi (this.rank, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_res_request extends Sproto.SprotoTypeBase {
		
		public grid: monopoly_item[]; // tag 0
		public level: number; // tag 1
		public tili: number; // tag 2
		public blood: number; // tag 3
		public pos: number; // tag 4
		public jifen: number; // tag 5
		public cheat: number; // tag 6
		public double: number; // tag 7
		public triple: number; // tag 8
		public curnum: number; // tag 9
		public useItem: monopoly_buff[]; // tag 10
		public bag: monopoly_item[]; // tag 11
		public log: monopoly_log_item[]; // tag 12
		public randpos: number; // tag 13
		public maxblood: number; // tag 14
		public doublegm: number; // tag 15
		public triplegm: number; // tag 16
		public cheatgm: number; // tag 17
		public tiligm: number; // tag 18
		public constructor(buffer: Uint8Array = null) {
			super(19, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.grid = this.de.roa(monopoly_item);
					break;
				case 1:
					this.level = this.de.ri ();
					break;
				case 2:
					this.tili = this.de.ri ();
					break;
				case 3:
					this.blood = this.de.ri ();
					break;
				case 4:
					this.pos = this.de.ri ();
					break;
				case 5:
					this.jifen = this.de.ri ();
					break;
				case 6:
					this.cheat = this.de.ri ();
					break;
				case 7:
					this.double = this.de.ri ();
					break;
				case 8:
					this.triple = this.de.ri ();
					break;
				case 9:
					this.curnum = this.de.ri ();
					break;
				case 10:
					this.useItem = this.de.roa(monopoly_buff);
					break;
				case 11:
					this.bag = this.de.roa(monopoly_item);
					break;
				case 12:
					this.log = this.de.roa(monopoly_log_item);
					break;
				case 13:
					this.randpos = this.de.ri ();
					break;
				case 14:
					this.maxblood = this.de.ri ();
					break;
				case 15:
					this.doublegm = this.de.ri ();
					break;
				case 16:
					this.triplegm = this.de.ri ();
					break;
				case 17:
					this.cheatgm = this.de.ri ();
					break;
				case 18:
					this.tiligm = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.grid != undefined) {
				this.se.woa (this.grid, 0);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 1);
			}

			if (this.tili != undefined) {
				this.se.wi (this.tili, 2);
			}

			if (this.blood != undefined) {
				this.se.wi (this.blood, 3);
			}

			if (this.pos != undefined) {
				this.se.wi (this.pos, 4);
			}

			if (this.jifen != undefined) {
				this.se.wi (this.jifen, 5);
			}

			if (this.cheat != undefined) {
				this.se.wi (this.cheat, 6);
			}

			if (this.double != undefined) {
				this.se.wi (this.double, 7);
			}

			if (this.triple != undefined) {
				this.se.wi (this.triple, 8);
			}

			if (this.curnum != undefined) {
				this.se.wi (this.curnum, 9);
			}

			if (this.useItem != undefined) {
				this.se.woa (this.useItem, 10);
			}

			if (this.bag != undefined) {
				this.se.woa (this.bag, 11);
			}

			if (this.log != undefined) {
				this.se.woa (this.log, 12);
			}

			if (this.randpos != undefined) {
				this.se.wi (this.randpos, 13);
			}

			if (this.maxblood != undefined) {
				this.se.wi (this.maxblood, 14);
			}

			if (this.doublegm != undefined) {
				this.se.wi (this.doublegm, 15);
			}

			if (this.triplegm != undefined) {
				this.se.wi (this.triplegm, 16);
			}

			if (this.cheatgm != undefined) {
				this.se.wi (this.cheatgm, 17);
			}

			if (this.tiligm != undefined) {
				this.se.wi (this.tiligm, 18);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_store_res_request extends Sproto.SprotoTypeBase {
		
		public data: monopoly_item[]; // tag 0
		public theme: number; // tag 1
		public extotal: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.roa(monopoly_item);
					break;
				case 1:
					this.theme = this.de.ri ();
					break;
				case 2:
					this.extotal = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.woa (this.data, 0);
			}

			if (this.theme != undefined) {
				this.se.wi (this.theme, 1);
			}

			if (this.extotal != undefined) {
				this.se.wi (this.extotal, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_sync_res_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public value: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.value = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_tili_res_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_use_res_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_monopoly_usespecial_res_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			return this.se.Close ();
		}
	}


}

