// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class achievement_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 1
		public state: number; // tag 2
		public value: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 1:
					this.id = this.de.ri ();
					break;
				case 2:
					this.state = this.de.ri ();
					break;
				case 3:
					this.value = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 1);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 2);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_achieve_change_data_request extends Sproto.SprotoTypeBase {
		
		public data: achievement_data; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.ro(achievement_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.wo (this.data, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_achieve_data_request extends Sproto.SprotoTypeBase {
		
		public achiEvement: achievement_data[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.achiEvement = this.de.roa(achievement_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.achiEvement != undefined) {
				this.se.woa (this.achiEvement, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_change_data_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public value: number; // tag 1
		public state: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.value = this.de.ri ();
					break;
				case 2:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 1);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_init_data_request extends Sproto.SprotoTypeBase {
		
		public taskDatas: task_data[]; // tag 0
		public vitality: number; // tag 1
		public vitalityDats: vitality_data[]; // tag 2
		public growup: number; // tag 3
		public growupid: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.taskDatas = this.de.roa(task_data);
					break;
				case 1:
					this.vitality = this.de.ri ();
					break;
				case 2:
					this.vitalityDats = this.de.roa(vitality_data);
					break;
				case 3:
					this.growup = this.de.ri ();
					break;
				case 4:
					this.growupid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.taskDatas != undefined) {
				this.se.woa (this.taskDatas, 0);
			}

			if (this.vitality != undefined) {
				this.se.wi (this.vitality, 1);
			}

			if (this.vitalityDats != undefined) {
				this.se.woa (this.vitalityDats, 2);
			}

			if (this.growup != undefined) {
				this.se.wi (this.growup, 3);
			}

			if (this.growupid != undefined) {
				this.se.wi (this.growupid, 4);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_join_achieve_data_request extends Sproto.SprotoTypeBase {
		
		public data: achievement_data; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.ro(achievement_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.wo (this.data, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_vitality_request extends Sproto.SprotoTypeBase {
		
		public vitality: number; // tag 0
		public growup: number; // tag 1
		public growupid: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.vitality = this.de.ri ();
					break;
				case 1:
					this.growup = this.de.ri ();
					break;
				case 2:
					this.growupid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.vitality != undefined) {
				this.se.wi (this.vitality, 0);
			}

			if (this.growup != undefined) {
				this.se.wi (this.growup, 1);
			}

			if (this.growupid != undefined) {
				this.se.wi (this.growupid, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_vitality_award_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public state: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_warorder_data_request extends Sproto.SprotoTypeBase {
		
		public data: warorder_data[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.roa(warorder_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.woa (this.data, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_task_warorder_update_request extends Sproto.SprotoTypeBase {
		
		public data: warorder_data; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.ro(warorder_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.wo (this.data, 0);
			}

			return this.se.Close ();
		}
	}


	export class task_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public value: number; // tag 1
		public state: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.value = this.de.ri ();
					break;
				case 2:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 1);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 2);
			}

			return this.se.Close ();
		}
	}


	export class vitality_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public state: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 1);
			}

			return this.se.Close ();
		}
	}


	export class warorder_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public state: number; // tag 1
		public tasktype: number; // tag 2
		public value: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.state = this.de.ri ();
					break;
				case 2:
					this.tasktype = this.de.ri ();
					break;
				case 3:
					this.value = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 1);
			}

			if (this.tasktype != undefined) {
				this.se.wi (this.tasktype, 2);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 3);
			}

			return this.se.Close ();
		}
	}


}

