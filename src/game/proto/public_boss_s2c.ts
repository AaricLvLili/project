// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cross_boss_info extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public hp: number; // tag 1
		public people: number; // tag 2
		public reliveTime: number; // tag 3
		public challengeing: boolean; // tag 4
		public killScore: number; // tag 5
		public maxKillScore: number; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.hp = this.de.ri ();
					break;
				case 2:
					this.people = this.de.ri ();
					break;
				case 3:
					this.reliveTime = this.de.ri ();
					break;
				case 4:
					this.challengeing = this.de.rb ();
					break;
				case 5:
					this.killScore = this.de.ri ();
					break;
				case 6:
					this.maxKillScore = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.hp != undefined) {
				this.se.wi (this.hp, 1);
			}

			if (this.people != undefined) {
				this.se.wi (this.people, 2);
			}

			if (this.reliveTime != undefined) {
				this.se.wi (this.reliveTime, 3);
			}

			if (this.challengeing != undefined) {
				this.se.wb (this.challengeing, 4);
			}

			if (this.killScore != undefined) {
				this.se.wi (this.killScore, 5);
			}

			if (this.maxKillScore != undefined) {
				this.se.wi (this.maxKillScore, 6);
			}

			return this.se.Close ();
		}
	}


	export class public_boss_info extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public hp: number; // tag 1
		public people: number; // tag 2
		public reliveTime: number; // tag 3
		public challengeing: boolean; // tag 4
		public ownerNmae: string; // tag 5
		public escapeTime: number; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.hp = this.de.ri ();
					break;
				case 2:
					this.people = this.de.ri ();
					break;
				case 3:
					this.reliveTime = this.de.ri ();
					break;
				case 4:
					this.challengeing = this.de.rb ();
					break;
				case 5:
					this.ownerNmae = this.de.rs ();
					break;
				case 6:
					this.escapeTime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.hp != undefined) {
				this.se.wi (this.hp, 1);
			}

			if (this.people != undefined) {
				this.se.wi (this.people, 2);
			}

			if (this.reliveTime != undefined) {
				this.se.wi (this.reliveTime, 3);
			}

			if (this.challengeing != undefined) {
				this.se.wb (this.challengeing, 4);
			}

			if (this.ownerNmae != undefined) {
				this.se.ws (this.ownerNmae, 5);
			}

			if (this.escapeTime != undefined) {
				this.se.wi (this.escapeTime, 6);
			}

			return this.se.Close ();
		}
	}


	export class public_boss_log extends Sproto.SprotoTypeBase {
		
		public time: number; // tag 0
		public name: string; // tag 1
		public hurt: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.time = this.de.ri ();
					break;
				case 1:
					this.name = this.de.rs ();
					break;
				case 2:
					this.hurt = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.time != undefined) {
				this.se.wi (this.time, 0);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 1);
			}

			if (this.hurt != undefined) {
				this.se.wi (this.hurt, 2);
			}

			return this.se.Close ();
		}
	}


	export class public_boss_player_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public roleName: string; // tag 1
		public job: number; // tag 2
		public sex: number; // tag 3
		public hurtValue: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.roleName = this.de.rs ();
					break;
				case 2:
					this.job = this.de.ri ();
					break;
				case 3:
					this.sex = this.de.ri ();
					break;
				case 4:
					this.hurtValue = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.roleName != undefined) {
				this.se.ws (this.roleName, 1);
			}

			if (this.job != undefined) {
				this.se.wi (this.job, 2);
			}

			if (this.sex != undefined) {
				this.se.wi (this.sex, 3);
			}

			if (this.hurtValue != undefined) {
				this.se.wi (this.hurtValue, 4);
			}

			return this.se.Close ();
		}
	}


	export class public_boss_rank_item_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public roleName: string; // tag 1
		public hurtValue: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.roleName = this.de.rs ();
					break;
				case 2:
					this.hurtValue = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.roleName != undefined) {
				this.se.ws (this.roleName, 1);
			}

			if (this.hurtValue != undefined) {
				this.se.wi (this.hurtValue, 2);
			}

			return this.se.Close ();
		}
	}


	export class reminds extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public state: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_cross_boss_list_request extends Sproto.SprotoTypeBase {
		
		public boosInfos: cross_boss_info[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.boosInfos = this.de.roa(cross_boss_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.boosInfos != undefined) {
				this.se.woa (this.boosInfos, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_paidboss_notice_res_request extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_paidboss_res_request extends Sproto.SprotoTypeBase {
		
		public bossRemind: number; // tag 0
		public boosInfos: public_boss_info[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bossRemind = this.de.ri ();
					break;
				case 1:
					this.boosInfos = this.de.roa(public_boss_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bossRemind != undefined) {
				this.se.wi (this.bossRemind, 0);
			}

			if (this.boosInfos != undefined) {
				this.se.woa (this.boosInfos, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_paidboss_setting_res_request extends Sproto.SprotoTypeBase {
		
		public bossAutoFight: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bossAutoFight = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bossAutoFight != undefined) {
				this.se.wi (this.bossAutoFight, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_blood_update_request extends Sproto.SprotoTypeBase {
		
		public hp: string; // tag 0
		public dhp: string; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.hp = this.de.rs ();
					break;
				case 1:
					this.dhp = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.hp != undefined) {
				this.se.ws (this.hp, 0);
			}

			if (this.dhp != undefined) {
				this.se.ws (this.dhp, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_be_hit_request extends Sproto.SprotoTypeBase {
		
		public isShow: boolean; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.isShow = this.de.rb ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.isShow != undefined) {
				this.se.wb (this.isShow, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_blood_request extends Sproto.SprotoTypeBase {
		
		public monsterId: number; // tag 0
		public bossHandler: number; // tag 1
		public handler: number; // tag 2
		public ranks: public_boss_rank_item_data[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.monsterId = this.de.ri ();
					break;
				case 1:
					this.bossHandler = this.de.ri ();
					break;
				case 2:
					this.handler = this.de.ri ();
					break;
				case 3:
					this.ranks = this.de.roa(public_boss_rank_item_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.monsterId != undefined) {
				this.se.wi (this.monsterId, 0);
			}

			if (this.bossHandler != undefined) {
				this.se.wi (this.bossHandler, 1);
			}

			if (this.handler != undefined) {
				this.se.wi (this.handler, 2);
			}

			if (this.ranks != undefined) {
				this.se.woa (this.ranks, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_challenge_result_request extends Sproto.SprotoTypeBase {
		
		public myRank: number; // tag 0
		public no1Name: string; // tag 1
		public no1Level: number; // tag 2
		public no1Reward: reward_data[]; // tag 3
		public myReward: reward_data[]; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.myRank = this.de.ri ();
					break;
				case 1:
					this.no1Name = this.de.rs ();
					break;
				case 2:
					this.no1Level = this.de.ri ();
					break;
				case 3:
					this.no1Reward = this.de.roa(reward_data);
					break;
				case 4:
					this.myReward = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.myRank != undefined) {
				this.se.wi (this.myRank, 0);
			}

			if (this.no1Name != undefined) {
				this.se.ws (this.no1Name, 1);
			}

			if (this.no1Level != undefined) {
				this.se.wi (this.no1Level, 2);
			}

			if (this.no1Reward != undefined) {
				this.se.woa (this.no1Reward, 3);
			}

			if (this.myReward != undefined) {
				this.se.woa (this.myReward, 4);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_challenge_suc_request extends Sproto.SprotoTypeBase {
		
		public robName: string; // tag 0
		public berobName: string; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.robName = this.de.rs ();
					break;
				case 1:
					this.berobName = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.robName != undefined) {
				this.se.ws (this.robName, 0);
			}

			if (this.berobName != undefined) {
				this.se.ws (this.berobName, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_clear_cd_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_cur_owner_request extends Sproto.SprotoTypeBase {
		
		public actorid: number; // tag 0
		public name: string; // tag 1
		public power: number; // tag 2
		public job: number; // tag 3
		public sex: number; // tag 4
		public hp: number; // tag 5
		public dhp: number; // tag 6
		public mainEle: number; // tag 7
		public constructor(buffer: Uint8Array = null) {
			super(8, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actorid = this.de.ri ();
					break;
				case 1:
					this.name = this.de.rs ();
					break;
				case 2:
					this.power = this.de.ri ();
					break;
				case 3:
					this.job = this.de.ri ();
					break;
				case 4:
					this.sex = this.de.ri ();
					break;
				case 5:
					this.hp = this.de.ri ();
					break;
				case 6:
					this.dhp = this.de.ri ();
					break;
				case 7:
					this.mainEle = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actorid != undefined) {
				this.se.wi (this.actorid, 0);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 1);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 2);
			}

			if (this.job != undefined) {
				this.se.wi (this.job, 3);
			}

			if (this.sex != undefined) {
				this.se.wi (this.sex, 4);
			}

			if (this.hp != undefined) {
				this.se.wi (this.hp, 5);
			}

			if (this.dhp != undefined) {
				this.se.wi (this.dhp, 6);
			}

			if (this.mainEle != undefined) {
				this.se.wi (this.mainEle, 7);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_hurt_result_request extends Sproto.SprotoTypeBase {
		
		public hurt: number; // tag 0
		public gold: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.hurt = this.de.ri ();
					break;
				case 1:
					this.gold = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.hurt != undefined) {
				this.se.wi (this.hurt, 0);
			}

			if (this.gold != undefined) {
				this.se.wi (this.gold, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_init_info_request extends Sproto.SprotoTypeBase {
		
		public ranks: public_boss_rank_item_data[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 3:
					this.ranks = this.de.roa(public_boss_rank_item_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.ranks != undefined) {
				this.se.woa (this.ranks, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_init_panel_info_request extends Sproto.SprotoTypeBase {
		
		public challengeCount: number; // tag 0
		public restoreTime: number; // tag 1
		public toDaySoul: number; // tag 2
		public cdTime: number; // tag 3
		public bossRemind: number; // tag 4
		public bossAutoFight: number; // tag 5
		public constructor(buffer: Uint8Array = null) {
			super(6, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.challengeCount = this.de.ri ();
					break;
				case 1:
					this.restoreTime = this.de.ri ();
					break;
				case 2:
					this.toDaySoul = this.de.ri ();
					break;
				case 3:
					this.cdTime = this.de.ri ();
					break;
				case 4:
					this.bossRemind = this.de.ri ();
					break;
				case 5:
					this.bossAutoFight = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.challengeCount != undefined) {
				this.se.wi (this.challengeCount, 0);
			}

			if (this.restoreTime != undefined) {
				this.se.wi (this.restoreTime, 1);
			}

			if (this.toDaySoul != undefined) {
				this.se.wi (this.toDaySoul, 2);
			}

			if (this.cdTime != undefined) {
				this.se.wi (this.cdTime, 3);
			}

			if (this.bossRemind != undefined) {
				this.se.wi (this.bossRemind, 4);
			}

			if (this.bossAutoFight != undefined) {
				this.se.wi (this.bossAutoFight, 5);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_kill_log_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public logs: public_boss_log[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.logs = this.de.roa(public_boss_log);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.logs != undefined) {
				this.se.woa (this.logs, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_rank_update_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public logs: public_boss_log[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.logs = this.de.roa(public_boss_log);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.logs != undefined) {
				this.se.woa (this.logs, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_reborn_notice_request extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_relive_time_request extends Sproto.SprotoTypeBase {
		
		public relive_time: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.relive_time = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.relive_time != undefined) {
				this.se.wi (this.relive_time, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_update_boss_request extends Sproto.SprotoTypeBase {
		
		public boosInfo: public_boss_info; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.boosInfo = this.de.ro(public_boss_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.boosInfo != undefined) {
				this.se.wo (this.boosInfo, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_boss_update_list_request extends Sproto.SprotoTypeBase {
		
		public boosInfos: public_boss_info[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.boosInfos = this.de.roa(public_boss_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.boosInfos != undefined) {
				this.se.woa (this.boosInfos, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_items_droped_request extends Sproto.SprotoTypeBase {
		
		public reward: reward_data[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 1:
					this.reward = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.reward != undefined) {
				this.se.woa (this.reward, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_public_player_list_request extends Sproto.SprotoTypeBase {
		
		public list: public_boss_player_data[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.list = this.de.roa(public_boss_player_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.list != undefined) {
				this.se.woa (this.list, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_vip_boss_challenge_time_request extends Sproto.SprotoTypeBase {
		
		public constructor(buffer: Uint8Array = null) {
			super(0, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			return this.se.Close ();
		}
	}


	export class sc_vip_boss_init_panel_info_request extends Sproto.SprotoTypeBase {
		
		public cdTime1: number; // tag 0
		public cdTime2: number; // tag 1
		public cdTime3: number; // tag 2
		public cdJoin: number; // tag 3
		public boosInfos: public_boss_info[]; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.cdTime1 = this.de.ri ();
					break;
				case 1:
					this.cdTime2 = this.de.ri ();
					break;
				case 2:
					this.cdTime3 = this.de.ri ();
					break;
				case 3:
					this.cdJoin = this.de.ri ();
					break;
				case 4:
					this.boosInfos = this.de.roa(public_boss_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.cdTime1 != undefined) {
				this.se.wi (this.cdTime1, 0);
			}

			if (this.cdTime2 != undefined) {
				this.se.wi (this.cdTime2, 1);
			}

			if (this.cdTime3 != undefined) {
				this.se.wi (this.cdTime3, 2);
			}

			if (this.cdJoin != undefined) {
				this.se.wi (this.cdJoin, 3);
			}

			if (this.boosInfos != undefined) {
				this.se.woa (this.boosInfos, 4);
			}

			return this.se.Close ();
		}
	}


	export class sc_vip_boss_refresh_remind_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_vip_boss_remind_panel_info_request extends Sproto.SprotoTypeBase {
		
		public remindStats: reminds[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.remindStats = this.de.roa(reminds);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.remindStats != undefined) {
				this.se.woa (this.remindStats, 0);
			}

			return this.se.Close ();
		}
	}


}

