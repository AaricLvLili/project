// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_tower_award_res_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public id: number; // tag 1
		public status: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.id = this.de.ri ();
					break;
				case 2:
					this.status = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.id != undefined) {
				this.se.wi (this.id, 1);
			}

			if (this.status != undefined) {
				this.se.wi (this.status, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_tower_floor_res_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public data: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.data = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.data != undefined) {
				this.se.wia (this.data, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_tower_init_res_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public maxlevel: number; // tag 1
		public rewards: number[]; // tag 2
		public ranks: tower_rank_data[]; // tag 3
		public myrank: number; // tag 4
		public pass: number[]; // tag 5
		public sweep: number; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.maxlevel = this.de.ri ();
					break;
				case 2:
					this.rewards = this.de.ria ();
					break;
				case 3:
					this.ranks = this.de.roa(tower_rank_data);
					break;
				case 4:
					this.myrank = this.de.ri ();
					break;
				case 5:
					this.pass = this.de.ria ();
					break;
				case 6:
					this.sweep = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.maxlevel != undefined) {
				this.se.wi (this.maxlevel, 1);
			}

			if (this.rewards != undefined) {
				this.se.wia (this.rewards, 2);
			}

			if (this.ranks != undefined) {
				this.se.woa (this.ranks, 3);
			}

			if (this.myrank != undefined) {
				this.se.wi (this.myrank, 4);
			}

			if (this.pass != undefined) {
				this.se.wia (this.pass, 5);
			}

			if (this.sweep != undefined) {
				this.se.wi (this.sweep, 6);
			}

			return this.se.Close ();
		}
	}


	export class sc_tower_sweep_res_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public sweep: number; // tag 1
		public reward: reward_data[]; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.sweep = this.de.ri ();
					break;
				case 2:
					this.reward = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.sweep != undefined) {
				this.se.wi (this.sweep, 1);
			}

			if (this.reward != undefined) {
				this.se.woa (this.reward, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_tower_sync_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public pass: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.pass = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.pass != undefined) {
				this.se.wia (this.pass, 1);
			}

			return this.se.Close ();
		}
	}


	export class tower_rank_data extends Sproto.SprotoTypeBase {
		
		public power: number; // tag 0
		public lvl: number; // tag 1
		public name: string; // tag 2
		public vip: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.power = this.de.ri ();
					break;
				case 1:
					this.lvl = this.de.ri ();
					break;
				case 2:
					this.name = this.de.rs ();
					break;
				case 3:
					this.vip = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.power != undefined) {
				this.se.wi (this.power, 0);
			}

			if (this.lvl != undefined) {
				this.se.wi (this.lvl, 1);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 2);
			}

			if (this.vip != undefined) {
				this.se.wi (this.vip, 3);
			}

			return this.se.Close ();
		}
	}


}

