// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_forge_back_goods_success_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_forge_belss_update_request extends Sproto.SprotoTypeBase {
		
		public roleId: number; // tag 0
		public index: number; // tag 1
		public value: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleId = this.de.ri ();
					break;
				case 1:
					this.index = this.de.ri ();
					break;
				case 2:
					this.value = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleId != undefined) {
				this.se.wi (this.roleId, 0);
			}

			if (this.index != undefined) {
				this.se.wi (this.index, 1);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_forge_bless_boost_res_request extends Sproto.SprotoTypeBase {
		
		public roleId: number; // tag 0
		public pos: number; // tag 1
		public blessexp: number; // tag 2
		public blessstar: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleId = this.de.ri ();
					break;
				case 1:
					this.pos = this.de.ri ();
					break;
				case 2:
					this.blessexp = this.de.ri ();
					break;
				case 3:
					this.blessstar = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleId != undefined) {
				this.se.wi (this.roleId, 0);
			}

			if (this.pos != undefined) {
				this.se.wi (this.pos, 1);
			}

			if (this.blessexp != undefined) {
				this.se.wi (this.blessexp, 2);
			}

			if (this.blessstar != undefined) {
				this.se.wi (this.blessstar, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_forge_bless_ronglu_success_request extends Sproto.SprotoTypeBase {
		
		public level: number; // tag 0
		public exp: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.level = this.de.ri ();
					break;
				case 1:
					this.exp = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.level != undefined) {
				this.se.wi (this.level, 0);
			}

			if (this.exp != undefined) {
				this.se.wi (this.exp, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_forge_bless_smelt_res_request extends Sproto.SprotoTypeBase {
		
		public handler: number; // tag 0
		public num: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handler = this.de.ri ();
					break;
				case 1:
					this.num = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handler != undefined) {
				this.se.wi (this.handler, 0);
			}

			if (this.num != undefined) {
				this.se.wi (this.num, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_forge_bless_upgrade_res_request extends Sproto.SprotoTypeBase {
		
		public roleId: number; // tag 0
		public pos: number; // tag 1
		public blesslv: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleId = this.de.ri ();
					break;
				case 1:
					this.pos = this.de.ri ();
					break;
				case 2:
					this.blesslv = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleId != undefined) {
				this.se.wi (this.roleId, 0);
			}

			if (this.pos != undefined) {
				this.se.wi (this.pos, 1);
			}

			if (this.blesslv != undefined) {
				this.se.wi (this.blesslv, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_forge_update_data_request extends Sproto.SprotoTypeBase {
		
		public roleId: number; // tag 0
		public index: number; // tag 1
		public value: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleId = this.de.ri ();
					break;
				case 1:
					this.index = this.de.ri ();
					break;
				case 2:
					this.value = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleId != undefined) {
				this.se.wi (this.roleId, 0);
			}

			if (this.index != undefined) {
				this.se.wi (this.index, 1);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 2);
			}

			return this.se.Close ();
		}
	}


}

