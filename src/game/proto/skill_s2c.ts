// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_skill_add_effect_request extends Sproto.SprotoTypeBase {
		
		public handle: number; // tag 0
		public effectID: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ri ();
					break;
				case 1:
					this.effectID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wi (this.handle, 0);
			}

			if (this.effectID != undefined) {
				this.se.wi (this.effectID, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_all_upgrade_result_request extends Sproto.SprotoTypeBase {
		
		public roleID: number; // tag 0
		public level: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleID = this.de.ri ();
					break;
				case 1:
					this.level = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleID != undefined) {
				this.se.wi (this.roleID, 0);
			}

			if (this.level != undefined) {
				this.se.wia (this.level, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_break_result_request extends Sproto.SprotoTypeBase {
		
		public roleID: number; // tag 0
		public skillID: number; // tag 1
		public breakLevel: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleID = this.de.ri ();
					break;
				case 1:
					this.skillID = this.de.ri ();
					break;
				case 2:
					this.breakLevel = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleID != undefined) {
				this.se.wi (this.roleID, 0);
			}

			if (this.skillID != undefined) {
				this.se.wi (this.skillID, 1);
			}

			if (this.breakLevel != undefined) {
				this.se.wi (this.breakLevel, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_deal_add_buff_request extends Sproto.SprotoTypeBase {
		
		public handle: number; // tag 0
		public buffID: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ri ();
					break;
				case 1:
					this.buffID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wi (this.handle, 0);
			}

			if (this.buffID != undefined) {
				this.se.wi (this.buffID, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_deal_remove_buff_request extends Sproto.SprotoTypeBase {
		
		public handle: number; // tag 0
		public buffID: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ri ();
					break;
				case 1:
					this.buffID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wi (this.handle, 0);
			}

			if (this.buffID != undefined) {
				this.se.wi (this.buffID, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_remove_effect_request extends Sproto.SprotoTypeBase {
		
		public handle: number; // tag 0
		public effectID: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ri ();
					break;
				case 1:
					this.effectID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wi (this.handle, 0);
			}

			if (this.effectID != undefined) {
				this.se.wi (this.effectID, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_setfight_res_request extends Sproto.SprotoTypeBase {
		
		public roleID: number; // tag 0
		public skillID: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleID = this.de.ri ();
					break;
				case 1:
					this.skillID = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleID != undefined) {
				this.se.wi (this.roleID, 0);
			}

			if (this.skillID != undefined) {
				this.se.wia (this.skillID, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_upgrade_result_request extends Sproto.SprotoTypeBase {
		
		public roleID: number; // tag 0
		public skillID: number; // tag 1
		public level: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleID = this.de.ri ();
					break;
				case 1:
					this.skillID = this.de.ri ();
					break;
				case 2:
					this.level = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleID != undefined) {
				this.se.wi (this.roleID, 0);
			}

			if (this.skillID != undefined) {
				this.se.wi (this.skillID, 1);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_use_result_request extends Sproto.SprotoTypeBase {
		
		public sourceHandle: number; // tag 0
		public skillID: number; // tag 1
		public targetHandle: number; // tag 2
		public datas: sc_skill_use_result_request_data[]; // tag 3
		public mp: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.sourceHandle = this.de.ri ();
					break;
				case 1:
					this.skillID = this.de.ri ();
					break;
				case 2:
					this.targetHandle = this.de.ri ();
					break;
				case 3:
					this.datas = this.de.roa(sc_skill_use_result_request_data);
					break;
				case 4:
					this.mp = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.sourceHandle != undefined) {
				this.se.wi (this.sourceHandle, 0);
			}

			if (this.skillID != undefined) {
				this.se.wi (this.skillID, 1);
			}

			if (this.targetHandle != undefined) {
				this.se.wi (this.targetHandle, 2);
			}

			if (this.datas != undefined) {
				this.se.woa (this.datas, 3);
			}

			if (this.mp != undefined) {
				this.se.wi (this.mp, 4);
			}

			return this.se.Close ();
		}
	}


	export class sc_skill_use_result_request_data extends Sproto.SprotoTypeBase {
		
		public handle: number; // tag 0
		public type: number; // tag 1
		public value: number; // tag 2
		public damageType: number; // tag 3
		public damageEle: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ri ();
					break;
				case 1:
					this.type = this.de.ri ();
					break;
				case 2:
					this.value = this.de.ri ();
					break;
				case 3:
					this.damageType = this.de.ri ();
					break;
				case 4:
					this.damageEle = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wi (this.handle, 0);
			}

			if (this.type != undefined) {
				this.se.wi (this.type, 1);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 2);
			}

			if (this.damageType != undefined) {
				this.se.wi (this.damageType, 3);
			}

			if (this.damageEle != undefined) {
				this.se.wi (this.damageEle, 4);
			}

			return this.se.Close ();
		}
	}


}

