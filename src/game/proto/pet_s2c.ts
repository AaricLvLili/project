// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class pet_attch_data extends Sproto.SprotoTypeBase {
		
		public roleid: number; // tag 0
		public petid: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleid = this.de.ri ();
					break;
				case 1:
					this.petid = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleid != undefined) {
				this.se.wi (this.roleid, 0);
			}

			if (this.petid != undefined) {
				this.se.wia (this.petid, 1);
			}

			return this.se.Close ();
		}
	}


	export class pet_data extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public name: string; // tag 1
		public level: number; // tag 2
		public exp: number; // tag 3
		public star: number; // tag 4
		public power: number; // tag 5
		public attr: attribute_data[]; // tag 6
		public skill: number; // tag 7
		public bskill: number[]; // tag 8
		public wash: number[]; // tag 9
		public lock: number[]; // tag 10
		public awake: boolean; // tag 11
		public constructor(buffer: Uint8Array = null) {
			super(12, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.name = this.de.rs ();
					break;
				case 2:
					this.level = this.de.ri ();
					break;
				case 3:
					this.exp = this.de.ri ();
					break;
				case 4:
					this.star = this.de.ri ();
					break;
				case 5:
					this.power = this.de.ri ();
					break;
				case 6:
					this.attr = this.de.roa(attribute_data);
					break;
				case 7:
					this.skill = this.de.ri ();
					break;
				case 8:
					this.bskill = this.de.ria ();
					break;
				case 9:
					this.wash = this.de.ria ();
					break;
				case 10:
					this.lock = this.de.ria ();
					break;
				case 11:
					this.awake = this.de.rb ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 1);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 2);
			}

			if (this.exp != undefined) {
				this.se.wi (this.exp, 3);
			}

			if (this.star != undefined) {
				this.se.wi (this.star, 4);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 5);
			}

			if (this.attr != undefined) {
				this.se.woa (this.attr, 6);
			}

			if (this.skill != undefined) {
				this.se.wi (this.skill, 7);
			}

			if (this.bskill != undefined) {
				this.se.wia (this.bskill, 8);
			}

			if (this.wash != undefined) {
				this.se.wia (this.wash, 9);
			}

			if (this.lock != undefined) {
				this.se.wia (this.lock, 10);
			}

			if (this.awake != undefined) {
				this.se.wb (this.awake, 11);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_activate_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_attach_init_res_request extends Sproto.SprotoTypeBase {
		
		public data: pet_attch_data[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.roa(pet_attch_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.woa (this.data, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_attach_res_request extends Sproto.SprotoTypeBase {
		
		public roleid: number; // tag 0
		public petid: number; // tag 1
		public slot: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleid = this.de.ri ();
					break;
				case 1:
					this.petid = this.de.ri ();
					break;
				case 2:
					this.slot = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleid != undefined) {
				this.se.wi (this.roleid, 0);
			}

			if (this.petid != undefined) {
				this.se.wi (this.petid, 1);
			}

			if (this.slot != undefined) {
				this.se.wi (this.slot, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_attach_unlock_res_request extends Sproto.SprotoTypeBase {
		
		public roleid: number; // tag 0
		public slot: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleid = this.de.ri ();
					break;
				case 1:
					this.slot = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleid != undefined) {
				this.se.wi (this.roleid, 0);
			}

			if (this.slot != undefined) {
				this.se.wi (this.slot, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_attr_res_request extends Sproto.SprotoTypeBase {
		
		public handler: number; // tag 0
		public attr: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handler = this.de.ri ();
					break;
				case 1:
					this.attr = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handler != undefined) {
				this.se.wi (this.handler, 0);
			}

			if (this.attr != undefined) {
				this.se.wia (this.attr, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_compose_res_request extends Sproto.SprotoTypeBase {
		
		public itemid: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.itemid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.itemid != undefined) {
				this.se.wi (this.itemid, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_init_res_request extends Sproto.SprotoTypeBase {
		
		public data: pet_data[]; // tag 0
		public star: number; // tag 1
		public attr: attribute_data[]; // tag 2
		public petlist: number[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.roa(pet_data);
					break;
				case 1:
					this.star = this.de.ri ();
					break;
				case 2:
					this.attr = this.de.roa(attribute_data);
					break;
				case 3:
					this.petlist = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.woa (this.data, 0);
			}

			if (this.star != undefined) {
				this.se.wi (this.star, 1);
			}

			if (this.attr != undefined) {
				this.se.woa (this.attr, 2);
			}

			if (this.petlist != undefined) {
				this.se.wia (this.petlist, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_pack_res_request extends Sproto.SprotoTypeBase {
		
		public star: number; // tag 0
		public attr: attribute_data[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.star = this.de.ri ();
					break;
				case 1:
					this.attr = this.de.roa(attribute_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.star != undefined) {
				this.se.wi (this.star, 0);
			}

			if (this.attr != undefined) {
				this.se.woa (this.attr, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_rename_res_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public petid: number; // tag 1
		public name: string; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				case 1:
					this.petid = this.de.ri ();
					break;
				case 2:
					this.name = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			if (this.petid != undefined) {
				this.se.wi (this.petid, 1);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_setfight_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public result: number; // tag 1
		public roleid: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.result = this.de.ri ();
					break;
				case 2:
					this.roleid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.result != undefined) {
				this.se.wi (this.result, 1);
			}

			if (this.roleid != undefined) {
				this.se.wi (this.roleid, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_skillup_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public result: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.result != undefined) {
				this.se.wi (this.result, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_smelt_res_request extends Sproto.SprotoTypeBase {
		
		public handler: number; // tag 0
		public num: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handler = this.de.ri ();
					break;
				case 1:
					this.num = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handler != undefined) {
				this.se.wi (this.handler, 0);
			}

			if (this.num != undefined) {
				this.se.wi (this.num, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_sync_attr_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public power: number; // tag 1
		public attr: attribute_data[]; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.power = this.de.ri ();
					break;
				case 2:
					this.attr = this.de.roa(attribute_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 1);
			}

			if (this.attr != undefined) {
				this.se.woa (this.attr, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_uplevel_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public level: number; // tag 1
		public exp: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.level = this.de.ri ();
					break;
				case 2:
					this.exp = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 1);
			}

			if (this.exp != undefined) {
				this.se.wi (this.exp, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_upstar_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public star: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.star = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.star != undefined) {
				this.se.wi (this.star, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_wake_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_wash_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public wash: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.wash = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.wash != undefined) {
				this.se.wia (this.wash, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_washlock_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public skillid: number; // tag 1
		public status: boolean; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.skillid = this.de.ri ();
					break;
				case 2:
					this.status = this.de.rb ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.skillid != undefined) {
				this.se.wi (this.skillid, 1);
			}

			if (this.status != undefined) {
				this.se.wb (this.status, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_pet_washrep_res_request extends Sproto.SprotoTypeBase {
		
		public petid: number; // tag 0
		public bskill: number[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.petid = this.de.ri ();
					break;
				case 1:
					this.bskill = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.petid != undefined) {
				this.se.wi (this.petid, 0);
			}

			if (this.bskill != undefined) {
				this.se.wia (this.bskill, 1);
			}

			return this.se.Close ();
		}
	}


}

