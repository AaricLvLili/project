// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class act_accumulateshare extends Sproto.SprotoTypeBase {
		
		public actId: number; // tag 0
		public shareCount: number; // tag 1
		public reward: sub_accumulatedata[]; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actId = this.de.ri ();
					break;
				case 1:
					this.shareCount = this.de.ri ();
					break;
				case 2:
					this.reward = this.de.roa(sub_accumulatedata);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actId != undefined) {
				this.se.wi (this.actId, 0);
			}

			if (this.shareCount != undefined) {
				this.se.wi (this.shareCount, 1);
			}

			if (this.reward != undefined) {
				this.se.woa (this.reward, 2);
			}

			return this.se.Close ();
		}
	}


	export class act_dailyshare extends Sproto.SprotoTypeBase {
		
		public actId: number; // tag 0
		public shareCount: number; // tag 1
		public rewardState: number; // tag 2
		public cdtime: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actId = this.de.ri ();
					break;
				case 1:
					this.shareCount = this.de.ri ();
					break;
				case 2:
					this.rewardState = this.de.ri ();
					break;
				case 3:
					this.cdtime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actId != undefined) {
				this.se.wi (this.actId, 0);
			}

			if (this.shareCount != undefined) {
				this.se.wi (this.shareCount, 1);
			}

			if (this.rewardState != undefined) {
				this.se.wi (this.rewardState, 2);
			}

			if (this.cdtime != undefined) {
				this.se.wi (this.cdtime, 3);
			}

			return this.se.Close ();
		}
	}


	export class act_firstshare extends Sproto.SprotoTypeBase {
		
		public actId: number; // tag 0
		public joinState: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actId = this.de.ri ();
					break;
				case 1:
					this.joinState = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actId != undefined) {
				this.se.wi (this.actId, 0);
			}

			if (this.joinState != undefined) {
				this.se.wi (this.joinState, 1);
			}

			return this.se.Close ();
		}
	}


	export class act_friendhelp extends Sproto.SprotoTypeBase {
		
		public actId: number; // tag 0
		public frienddata: friend_record[]; // tag 1
		public redpacket: redpacket[]; // tag 2
		public helpcount: number; // tag 3
		public newplayer: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actId = this.de.ri ();
					break;
				case 1:
					this.frienddata = this.de.roa(friend_record);
					break;
				case 2:
					this.redpacket = this.de.roa(redpacket);
					break;
				case 3:
					this.helpcount = this.de.ri ();
					break;
				case 4:
					this.newplayer = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actId != undefined) {
				this.se.wi (this.actId, 0);
			}

			if (this.frienddata != undefined) {
				this.se.woa (this.frienddata, 1);
			}

			if (this.redpacket != undefined) {
				this.se.woa (this.redpacket, 2);
			}

			if (this.helpcount != undefined) {
				this.se.wi (this.helpcount, 3);
			}

			if (this.newplayer != undefined) {
				this.se.wi (this.newplayer, 4);
			}

			return this.se.Close ();
		}
	}


	export class friend_record extends Sproto.SprotoTypeBase {
		
		public dbid: number; // tag 0
		public accid: string; // tag 1
		public level: number; // tag 2
		public imgurl: string; // tag 3
		public taghelp: number; // tag 4
		public taglevelup: number; // tag 5
		public friendName: string; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.dbid = this.de.ri ();
					break;
				case 1:
					this.accid = this.de.rs ();
					break;
				case 2:
					this.level = this.de.ri ();
					break;
				case 3:
					this.imgurl = this.de.rs ();
					break;
				case 4:
					this.taghelp = this.de.ri ();
					break;
				case 5:
					this.taglevelup = this.de.ri ();
					break;
				case 6:
					this.friendName = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.dbid != undefined) {
				this.se.wi (this.dbid, 0);
			}

			if (this.accid != undefined) {
				this.se.ws (this.accid, 1);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 2);
			}

			if (this.imgurl != undefined) {
				this.se.ws (this.imgurl, 3);
			}

			if (this.taghelp != undefined) {
				this.se.wi (this.taghelp, 4);
			}

			if (this.taglevelup != undefined) {
				this.se.wi (this.taglevelup, 5);
			}

			if (this.friendName != undefined) {
				this.se.ws (this.friendName, 6);
			}

			return this.se.Close ();
		}
	}


	export class redpacket extends Sproto.SprotoTypeBase {
		
		public strid: string; // tag 0
		public sharecoin: number; // tag 1
		public state: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.strid = this.de.rs ();
					break;
				case 1:
					this.sharecoin = this.de.ri ();
					break;
				case 2:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.strid != undefined) {
				this.se.ws (this.strid, 0);
			}

			if (this.sharecoin != undefined) {
				this.se.wi (this.sharecoin, 1);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_share_Help_result_request extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public state: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_share_buffer_request extends Sproto.SprotoTypeBase {
		
		public lefttime: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.lefttime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.lefttime != undefined) {
				this.se.wi (this.lefttime, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_share_init_info_request extends Sproto.SprotoTypeBase {
		
		public actinfos: share_data_collection; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actinfos = this.de.ro(share_data_collection);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actinfos != undefined) {
				this.se.wo (this.actinfos, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_share_notify_request extends Sproto.SprotoTypeBase {
		
		public actId: number; // tag 0
		public param1: number; // tag 1
		public param2: number; // tag 2
		public param3: number; // tag 3
		public friend: friend_record; // tag 5
		public redpacket: redpacket; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actId = this.de.ri ();
					break;
				case 1:
					this.param1 = this.de.ri ();
					break;
				case 2:
					this.param2 = this.de.ri ();
					break;
				case 3:
					this.param3 = this.de.ri ();
					break;
				case 5:
					this.friend = this.de.ro(friend_record);
					break;
				case 6:
					this.redpacket = this.de.ro(redpacket);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actId != undefined) {
				this.se.wi (this.actId, 0);
			}

			if (this.param1 != undefined) {
				this.se.wi (this.param1, 1);
			}

			if (this.param2 != undefined) {
				this.se.wi (this.param2, 2);
			}

			if (this.param3 != undefined) {
				this.se.wi (this.param3, 3);
			}

			if (this.friend != undefined) {
				this.se.wo (this.friend, 5);
			}

			if (this.redpacket != undefined) {
				this.se.wo (this.redpacket, 6);
			}

			return this.se.Close ();
		}
	}


	export class share_data_collection extends Sproto.SprotoTypeBase {
		
		public act1: act_firstshare; // tag 0
		public act2: act_dailyshare; // tag 1
		public act3: act_accumulateshare; // tag 2
		public act4: act_friendhelp; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.act1 = this.de.ro(act_firstshare);
					break;
				case 1:
					this.act2 = this.de.ro(act_dailyshare);
					break;
				case 2:
					this.act3 = this.de.ro(act_accumulateshare);
					break;
				case 3:
					this.act4 = this.de.ro(act_friendhelp);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.act1 != undefined) {
				this.se.wo (this.act1, 0);
			}

			if (this.act2 != undefined) {
				this.se.wo (this.act2, 1);
			}

			if (this.act3 != undefined) {
				this.se.wo (this.act3, 2);
			}

			if (this.act4 != undefined) {
				this.se.wo (this.act4, 3);
			}

			return this.se.Close ();
		}
	}


	export class sub_accumulatedata extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public state: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				case 1:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 1);
			}

			return this.se.Close ();
		}
	}


}

