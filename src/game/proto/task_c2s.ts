// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class cs_task_apply_vitality_request extends Sproto.SprotoTypeBase {
		
		public taskID: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.taskID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.taskID != undefined) {
				this.se.wi (this.taskID, 0);
			}

			return this.se.Close ();
		}
	}


	export class cs_task_get_achieve_request extends Sproto.SprotoTypeBase {
		
		public taskID: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.taskID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.taskID != undefined) {
				this.se.wi (this.taskID, 0);
			}

			return this.se.Close ();
		}
	}


	export class cs_task_get_task_request extends Sproto.SprotoTypeBase {
		
		public taskID: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.taskID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.taskID != undefined) {
				this.se.wi (this.taskID, 0);
			}

			return this.se.Close ();
		}
	}


	export class cs_task_get_vitality_awards_request extends Sproto.SprotoTypeBase {
		
		public taskID: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.taskID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.taskID != undefined) {
				this.se.wi (this.taskID, 0);
			}

			return this.se.Close ();
		}
	}


	export class cs_task_share_open_request extends Sproto.SprotoTypeBase {
		
		public taskID: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.taskID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.taskID != undefined) {
				this.se.wi (this.taskID, 0);
			}

			return this.se.Close ();
		}
	}


	export class cs_task_warorder_reward_request extends Sproto.SprotoTypeBase {
		
		public taskID: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.taskID = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.taskID != undefined) {
				this.se.wi (this.taskID, 0);
			}

			return this.se.Close ();
		}
	}


}

