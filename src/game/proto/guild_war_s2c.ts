// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class gdwar_guild_info extends Sproto.SprotoTypeBase {
		
		public guildId: number; // tag 0
		public guildName: string; // tag 1
		public integral: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.guildId = this.de.ri ();
					break;
				case 1:
					this.guildName = this.de.rs ();
					break;
				case 2:
					this.integral = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.guildId != undefined) {
				this.se.wi (this.guildId, 0);
			}

			if (this.guildName != undefined) {
				this.se.ws (this.guildName, 1);
			}

			if (this.integral != undefined) {
				this.se.wi (this.integral, 2);
			}

			return this.se.Close ();
		}
	}


	export class gdwar_member_info extends Sproto.SprotoTypeBase {
		
		public dbid: number; // tag 0
		public actorName: string; // tag 1
		public integral: number; // tag 2
		public position: number; // tag 3
		public killNum: number; // tag 4
		public fightPow: number; // tag 5
		public headId: number; // tag 6
		public office: number; // tag 7
		public constructor(buffer: Uint8Array = null) {
			super(8, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.dbid = this.de.ri ();
					break;
				case 1:
					this.actorName = this.de.rs ();
					break;
				case 2:
					this.integral = this.de.ri ();
					break;
				case 3:
					this.position = this.de.ri ();
					break;
				case 4:
					this.killNum = this.de.ri ();
					break;
				case 5:
					this.fightPow = this.de.ri ();
					break;
				case 6:
					this.headId = this.de.ri ();
					break;
				case 7:
					this.office = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.dbid != undefined) {
				this.se.wi (this.dbid, 0);
			}

			if (this.actorName != undefined) {
				this.se.ws (this.actorName, 1);
			}

			if (this.integral != undefined) {
				this.se.wi (this.integral, 2);
			}

			if (this.position != undefined) {
				this.se.wi (this.position, 3);
			}

			if (this.killNum != undefined) {
				this.se.wi (this.killNum, 4);
			}

			if (this.fightPow != undefined) {
				this.se.wi (this.fightPow, 5);
			}

			if (this.headId != undefined) {
				this.se.wi (this.headId, 6);
			}

			if (this.office != undefined) {
				this.se.wi (this.office, 7);
			}

			return this.se.Close ();
		}
	}


	export class gdwar_targeter extends Sproto.SprotoTypeBase {
		
		public guildId: number; // tag 0
		public guildName: string; // tag 1
		public actorId: number; // tag 2
		public actorName: string; // tag 3
		public actorHead: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.guildId = this.de.ri ();
					break;
				case 1:
					this.guildName = this.de.rs ();
					break;
				case 2:
					this.actorId = this.de.ri ();
					break;
				case 3:
					this.actorName = this.de.rs ();
					break;
				case 4:
					this.actorHead = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.guildId != undefined) {
				this.se.wi (this.guildId, 0);
			}

			if (this.guildName != undefined) {
				this.se.ws (this.guildName, 1);
			}

			if (this.actorId != undefined) {
				this.se.wi (this.actorId, 2);
			}

			if (this.actorName != undefined) {
				this.se.ws (this.actorName, 3);
			}

			if (this.actorHead != undefined) {
				this.se.wi (this.actorHead, 4);
			}

			return this.se.Close ();
		}
	}


	export class guild_hurt_rank extends Sproto.SprotoTypeBase {
		
		public guildId: number; // tag 0
		public guildName: string; // tag 1
		public hurtValue: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.guildId = this.de.ri ();
					break;
				case 1:
					this.guildName = this.de.rs ();
					break;
				case 2:
					this.hurtValue = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.guildId != undefined) {
				this.se.wi (this.guildId, 0);
			}

			if (this.guildName != undefined) {
				this.se.ws (this.guildName, 1);
			}

			if (this.hurtValue != undefined) {
				this.se.wi (this.hurtValue, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_actor_data_request extends Sproto.SprotoTypeBase {
		
		public feats: number; // tag 0
		public step: number; // tag 1
		public point: number; // tag 2
		public wallStatus: boolean; // tag 3
		public cityStatus: boolean; // tag 4
		public palaceStatus: boolean; // tag 5
		public kingStatus: boolean; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.feats = this.de.ri ();
					break;
				case 1:
					this.step = this.de.ri ();
					break;
				case 2:
					this.point = this.de.ri ();
					break;
				case 3:
					this.wallStatus = this.de.rb ();
					break;
				case 4:
					this.cityStatus = this.de.rb ();
					break;
				case 5:
					this.palaceStatus = this.de.rb ();
					break;
				case 6:
					this.kingStatus = this.de.rb ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.feats != undefined) {
				this.se.wi (this.feats, 0);
			}

			if (this.step != undefined) {
				this.se.wi (this.step, 1);
			}

			if (this.point != undefined) {
				this.se.wi (this.point, 2);
			}

			if (this.wallStatus != undefined) {
				this.se.wb (this.wallStatus, 3);
			}

			if (this.cityStatus != undefined) {
				this.se.wb (this.cityStatus, 4);
			}

			if (this.palaceStatus != undefined) {
				this.se.wb (this.palaceStatus, 5);
			}

			if (this.kingStatus != undefined) {
				this.se.wb (this.kingStatus, 6);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_attack_change_request extends Sproto.SprotoTypeBase {
		
		public handle: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wi (this.handle, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_attackers_request extends Sproto.SprotoTypeBase {
		
		public datas: gdwar_targeter[]; // tag 0
		public nums: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.datas = this.de.roa(gdwar_targeter);
					break;
				case 1:
					this.nums = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.datas != undefined) {
				this.se.woa (this.datas, 0);
			}

			if (this.nums != undefined) {
				this.se.wi (this.nums, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_base_info_request extends Sproto.SprotoTypeBase {
		
		public selfIntegral: number; // tag 0
		public guildIntegral: number; // tag 1
		public datas: gdwar_guild_info[]; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.selfIntegral = this.de.ri ();
					break;
				case 1:
					this.guildIntegral = this.de.ri ();
					break;
				case 2:
					this.datas = this.de.roa(gdwar_guild_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.selfIntegral != undefined) {
				this.se.wi (this.selfIntegral, 0);
			}

			if (this.guildIntegral != undefined) {
				this.se.wi (this.guildIntegral, 1);
			}

			if (this.datas != undefined) {
				this.se.woa (this.datas, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_city_owner_change_request extends Sproto.SprotoTypeBase {
		
		public ownerName: string; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.ownerName = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.ownerName != undefined) {
				this.se.ws (this.ownerName, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_enemies_request extends Sproto.SprotoTypeBase {
		
		public datas: gdwar_targeter[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.datas = this.de.roa(gdwar_targeter);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.datas != undefined) {
				this.se.woa (this.datas, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_flag_data_request extends Sproto.SprotoTypeBase {
		
		public configId: number; // tag 0
		public entityId: number; // tag 1
		public overTime: number; // tag 2
		public holderId: number; // tag 3
		public holderName: string; // tag 4
		public shieldRate: number; // tag 5
		public openTime: number; // tag 6
		public holderGuild: string; // tag 7
		public constructor(buffer: Uint8Array = null) {
			super(8, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.configId = this.de.ri ();
					break;
				case 1:
					this.entityId = this.de.ri ();
					break;
				case 2:
					this.overTime = this.de.ri ();
					break;
				case 3:
					this.holderId = this.de.ri ();
					break;
				case 4:
					this.holderName = this.de.rs ();
					break;
				case 5:
					this.shieldRate = this.de.ri ();
					break;
				case 6:
					this.openTime = this.de.ri ();
					break;
				case 7:
					this.holderGuild = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.configId != undefined) {
				this.se.wi (this.configId, 0);
			}

			if (this.entityId != undefined) {
				this.se.wi (this.entityId, 1);
			}

			if (this.overTime != undefined) {
				this.se.wi (this.overTime, 2);
			}

			if (this.holderId != undefined) {
				this.se.wi (this.holderId, 3);
			}

			if (this.holderName != undefined) {
				this.se.ws (this.holderName, 4);
			}

			if (this.shieldRate != undefined) {
				this.se.wi (this.shieldRate, 5);
			}

			if (this.openTime != undefined) {
				this.se.wi (this.openTime, 6);
			}

			if (this.holderGuild != undefined) {
				this.se.ws (this.holderGuild, 7);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_flag_notice_request extends Sproto.SprotoTypeBase {
		
		public overTime: number; // tag 0
		public holderName: string; // tag 1
		public holderGuild: string; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.overTime = this.de.ri ();
					break;
				case 1:
					this.holderName = this.de.rs ();
					break;
				case 2:
					this.holderGuild = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.overTime != undefined) {
				this.se.wi (this.overTime, 0);
			}

			if (this.holderName != undefined) {
				this.se.ws (this.holderName, 1);
			}

			if (this.holderGuild != undefined) {
				this.se.ws (this.holderGuild, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_guild_group_request extends Sproto.SprotoTypeBase {
		
		public bestguildname: string; // tag 0
		public serverid: number; // tag 1
		public guildname: string; // tag 2
		public infznumber: number; // tag 3
		public entitle: number; // tag 4
		public lists: kffz_info[]; // tag 5
		public constructor(buffer: Uint8Array = null) {
			super(6, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bestguildname = this.de.rs ();
					break;
				case 1:
					this.serverid = this.de.ri ();
					break;
				case 2:
					this.guildname = this.de.rs ();
					break;
				case 3:
					this.infznumber = this.de.ri ();
					break;
				case 4:
					this.entitle = this.de.ri ();
					break;
				case 5:
					this.lists = this.de.roa(kffz_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bestguildname != undefined) {
				this.se.ws (this.bestguildname, 0);
			}

			if (this.serverid != undefined) {
				this.se.wi (this.serverid, 1);
			}

			if (this.guildname != undefined) {
				this.se.ws (this.guildname, 2);
			}

			if (this.infznumber != undefined) {
				this.se.wi (this.infznumber, 3);
			}

			if (this.entitle != undefined) {
				this.se.wi (this.entitle, 4);
			}

			if (this.lists != undefined) {
				this.se.woa (this.lists, 5);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_guild_member_request extends Sproto.SprotoTypeBase {
		
		public datas: gdwar_member_info[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.datas = this.de.roa(gdwar_member_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.datas != undefined) {
				this.se.woa (this.datas, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_kill_info_request extends Sproto.SprotoTypeBase {
		
		public cd: number; // tag 0
		public killName: string; // tag 1
		public killGuild: string; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.cd = this.de.ri ();
					break;
				case 1:
					this.killName = this.de.rs ();
					break;
				case 2:
					this.killGuild = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.cd != undefined) {
				this.se.wi (this.cd, 0);
			}

			if (this.killName != undefined) {
				this.se.ws (this.killName, 1);
			}

			if (this.killGuild != undefined) {
				this.se.ws (this.killGuild, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_lottery_over_request extends Sproto.SprotoTypeBase {
		
		public name: string; // tag 0
		public point: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.name = this.de.rs ();
					break;
				case 1:
					this.point = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.name != undefined) {
				this.se.ws (this.name, 0);
			}

			if (this.point != undefined) {
				this.se.wi (this.point, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_lottery_point_request extends Sproto.SprotoTypeBase {
		
		public point: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.point = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.point != undefined) {
				this.se.wi (this.point, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_reward_request extends Sproto.SprotoTypeBase {
		
		public winerId: number; // tag 0
		public winerName: string; // tag 1
		public actorPoint: number; // tag 2
		public actorRank: number; // tag 3
		public guildPoint: number; // tag 4
		public guildRank: number; // tag 5
		public actorReward: reward_data[]; // tag 6
		public warType: number; // tag 7
		public constructor(buffer: Uint8Array = null) {
			super(8, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.winerId = this.de.ri ();
					break;
				case 1:
					this.winerName = this.de.rs ();
					break;
				case 2:
					this.actorPoint = this.de.ri ();
					break;
				case 3:
					this.actorRank = this.de.ri ();
					break;
				case 4:
					this.guildPoint = this.de.ri ();
					break;
				case 5:
					this.guildRank = this.de.ri ();
					break;
				case 6:
					this.actorReward = this.de.roa(reward_data);
					break;
				case 7:
					this.warType = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.winerId != undefined) {
				this.se.wi (this.winerId, 0);
			}

			if (this.winerName != undefined) {
				this.se.ws (this.winerName, 1);
			}

			if (this.actorPoint != undefined) {
				this.se.wi (this.actorPoint, 2);
			}

			if (this.actorRank != undefined) {
				this.se.wi (this.actorRank, 3);
			}

			if (this.guildPoint != undefined) {
				this.se.wi (this.guildPoint, 4);
			}

			if (this.guildRank != undefined) {
				this.se.wi (this.guildRank, 5);
			}

			if (this.actorReward != undefined) {
				this.se.woa (this.actorReward, 6);
			}

			if (this.warType != undefined) {
				this.se.wi (this.warType, 7);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_start_info_request extends Sproto.SprotoTypeBase {
		
		public isWarStart: boolean; // tag 0
		public startTime: number; // tag 1
		public endTime: number; // tag 2
		public warType: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.isWarStart = this.de.rb ();
					break;
				case 1:
					this.startTime = this.de.ri ();
					break;
				case 2:
					this.endTime = this.de.ri ();
					break;
				case 3:
					this.warType = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.isWarStart != undefined) {
				this.se.wb (this.isWarStart, 0);
			}

			if (this.startTime != undefined) {
				this.se.wi (this.startTime, 1);
			}

			if (this.endTime != undefined) {
				this.se.wi (this.endTime, 2);
			}

			if (this.warType != undefined) {
				this.se.wi (this.warType, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_wall_rank_request extends Sproto.SprotoTypeBase {
		
		public configId: number; // tag 0
		public entityId: number; // tag 1
		public wallTime: number; // tag 2
		public shieldTime: number; // tag 3
		public hurtRanks: guild_hurt_rank[]; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.configId = this.de.ri ();
					break;
				case 1:
					this.entityId = this.de.ri ();
					break;
				case 2:
					this.wallTime = this.de.ri ();
					break;
				case 3:
					this.shieldTime = this.de.ri ();
					break;
				case 4:
					this.hurtRanks = this.de.roa(guild_hurt_rank);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.configId != undefined) {
				this.se.wi (this.configId, 0);
			}

			if (this.entityId != undefined) {
				this.se.wi (this.entityId, 1);
			}

			if (this.wallTime != undefined) {
				this.se.wi (this.wallTime, 2);
			}

			if (this.shieldTime != undefined) {
				this.se.wi (this.shieldTime, 3);
			}

			if (this.hurtRanks != undefined) {
				this.se.woa (this.hurtRanks, 4);
			}

			return this.se.Close ();
		}
	}


	export class sc_gdwar_wall_reward_request extends Sproto.SprotoTypeBase {
		
		public firstName: string; // tag 0
		public firstId: number; // tag 1
		public hurtRank: number; // tag 2
		public hurtValue: number; // tag 3
		public rewards: reward_data[]; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.firstName = this.de.rs ();
					break;
				case 1:
					this.firstId = this.de.ri ();
					break;
				case 2:
					this.hurtRank = this.de.ri ();
					break;
				case 3:
					this.hurtValue = this.de.ri ();
					break;
				case 4:
					this.rewards = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.firstName != undefined) {
				this.se.ws (this.firstName, 0);
			}

			if (this.firstId != undefined) {
				this.se.wi (this.firstId, 1);
			}

			if (this.hurtRank != undefined) {
				this.se.wi (this.hurtRank, 2);
			}

			if (this.hurtValue != undefined) {
				this.se.wi (this.hurtValue, 3);
			}

			if (this.rewards != undefined) {
				this.se.woa (this.rewards, 4);
			}

			return this.se.Close ();
		}
	}


}

