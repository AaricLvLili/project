// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class CreateActor_request extends Sproto.SprotoTypeBase {
		
		public actorname: string; // tag 0
		public sex: number; // tag 1
		public job: number; // tag 2
		public icon: number; // tag 3
		public pf: string; // tag 4
		public imgurl: string; // tag 5
		public inviteid: number; // tag 6
		public imgtag: string; // tag 7
		public constructor(buffer: Uint8Array = null) {
			super(8, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actorname = this.de.rs ();
					break;
				case 1:
					this.sex = this.de.ri ();
					break;
				case 2:
					this.job = this.de.ri ();
					break;
				case 3:
					this.icon = this.de.ri ();
					break;
				case 4:
					this.pf = this.de.rs ();
					break;
				case 5:
					this.imgurl = this.de.rs ();
					break;
				case 6:
					this.inviteid = this.de.ri ();
					break;
				case 7:
					this.imgtag = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actorname != undefined) {
				this.se.ws (this.actorname, 0);
			}

			if (this.sex != undefined) {
				this.se.wi (this.sex, 1);
			}

			if (this.job != undefined) {
				this.se.wi (this.job, 2);
			}

			if (this.icon != undefined) {
				this.se.wi (this.icon, 3);
			}

			if (this.pf != undefined) {
				this.se.ws (this.pf, 4);
			}

			if (this.imgurl != undefined) {
				this.se.ws (this.imgurl, 5);
			}

			if (this.inviteid != undefined) {
				this.se.wi (this.inviteid, 6);
			}

			if (this.imgtag != undefined) {
				this.se.ws (this.imgtag, 7);
			}

			return this.se.Close ();
		}
	}


	export class CreateActor_response extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public actorid: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				case 1:
					this.actorid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			if (this.actorid != undefined) {
				this.se.wi (this.actorid, 1);
			}

			return this.se.Close ();
		}
	}


	export class EnterGame_request extends Sproto.SprotoTypeBase {
		
		public actorid: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actorid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actorid != undefined) {
				this.se.wi (this.actorid, 0);
			}

			return this.se.Close ();
		}
	}


	export class EnterGame_response extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			return this.se.Close ();
		}
	}


	export class QueryList_request extends Sproto.SprotoTypeBase {
		
		public constructor(buffer: Uint8Array = null) {
			super(0, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			return this.se.Close ();
		}
	}


	export class QueryList_response extends Sproto.SprotoTypeBase {
		
		public code: boolean; // tag 0
		public actorid: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.code = this.de.rb ();
					break;
				case 1:
					this.actorid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.code != undefined) {
				this.se.wb (this.code, 0);
			}

			if (this.actorid != undefined) {
				this.se.wi (this.actorid, 1);
			}

			return this.se.Close ();
		}
	}


	export class RandName_request extends Sproto.SprotoTypeBase {
		
		public sex: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.sex = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.sex != undefined) {
				this.se.wi (this.sex, 0);
			}

			return this.se.Close ();
		}
	}


	export class RandName_response extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public actorname: string; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				case 1:
					this.actorname = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			if (this.actorname != undefined) {
				this.se.ws (this.actorname, 1);
			}

			return this.se.Close ();
		}
	}


	export class UpdateHead_request extends Sproto.SprotoTypeBase {
		
		public imgurl: string; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.imgurl = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.imgurl != undefined) {
				this.se.ws (this.imgurl, 0);
			}

			return this.se.Close ();
		}
	}


	export class checkAccount_request extends Sproto.SprotoTypeBase {
		
		public accountname: string; // tag 0
		public password: string; // tag 1
		public platformuid: string; // tag 2
		public token: string; // tag 3
		public serverid: number; // tag 4
		public deviceInfo: string; // tag 5
		public constructor(buffer: Uint8Array = null) {
			super(6, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.accountname = this.de.rs ();
					break;
				case 1:
					this.password = this.de.rs ();
					break;
				case 2:
					this.platformuid = this.de.rs ();
					break;
				case 3:
					this.token = this.de.rs ();
					break;
				case 4:
					this.serverid = this.de.ri ();
					break;
				case 5:
					this.deviceInfo = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.accountname != undefined) {
				this.se.ws (this.accountname, 0);
			}

			if (this.password != undefined) {
				this.se.ws (this.password, 1);
			}

			if (this.platformuid != undefined) {
				this.se.ws (this.platformuid, 2);
			}

			if (this.token != undefined) {
				this.se.ws (this.token, 3);
			}

			if (this.serverid != undefined) {
				this.se.wi (this.serverid, 4);
			}

			if (this.deviceInfo != undefined) {
				this.se.ws (this.deviceInfo, 5);
			}

			return this.se.Close ();
		}
	}


}

