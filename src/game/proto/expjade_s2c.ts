// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_expjade_addexp_request extends Sproto.SprotoTypeBase {
		
		public allExp: number; // tag 0
		public addExp: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.allExp = this.de.ri ();
					break;
				case 1:
					this.addExp = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.allExp != undefined) {
				this.se.wi (this.allExp, 0);
			}

			if (this.addExp != undefined) {
				this.se.wi (this.addExp, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_expjade_data_request extends Sproto.SprotoTypeBase {
		
		public allExp: number; // tag 0
		public useCount: number; // tag 1
		public doubleCount: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.allExp = this.de.ri ();
					break;
				case 1:
					this.useCount = this.de.ri ();
					break;
				case 2:
					this.doubleCount = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.allExp != undefined) {
				this.se.wi (this.allExp, 0);
			}

			if (this.useCount != undefined) {
				this.se.wi (this.useCount, 1);
			}

			if (this.doubleCount != undefined) {
				this.se.wi (this.doubleCount, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_expjade_use_result_request extends Sproto.SprotoTypeBase {
		
		public allExp: number; // tag 0
		public useCount: number; // tag 1
		public doubleCount: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.allExp = this.de.ri ();
					break;
				case 1:
					this.useCount = this.de.ri ();
					break;
				case 2:
					this.doubleCount = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.allExp != undefined) {
				this.se.wi (this.allExp, 0);
			}

			if (this.useCount != undefined) {
				this.se.wi (this.useCount, 1);
			}

			if (this.doubleCount != undefined) {
				this.se.wi (this.doubleCount, 2);
			}

			return this.se.Close ();
		}
	}


}

