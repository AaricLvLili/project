// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class checkAccountRet_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public ipRegion: string; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				case 1:
					this.ipRegion = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			if (this.ipRegion != undefined) {
				this.se.ws (this.ipRegion, 1);
			}

			return this.se.Close ();
		}
	}


	export class scRoleBase_request extends Sproto.SprotoTypeBase {
		
		public roleNum: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.roleNum = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.roleNum != undefined) {
				this.se.wi (this.roleNum, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_base_game_time_request extends Sproto.SprotoTypeBase {
		
		public time: number; // tag 0
		public serverMergeTime: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.time = this.de.ri ();
					break;
				case 1:
					this.serverMergeTime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.time != undefined) {
				this.se.wi (this.time, 0);
			}

			if (this.serverMergeTime != undefined) {
				this.se.wi (this.serverMergeTime, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_base_open_day_request extends Sproto.SprotoTypeBase {
		
		public day: number; // tag 1
		public loginDay: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 1:
					this.day = this.de.ri ();
					break;
				case 2:
					this.loginDay = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.day != undefined) {
				this.se.wi (this.day, 1);
			}

			if (this.loginDay != undefined) {
				this.se.wi (this.loginDay, 2);
			}

			return this.se.Close ();
		}
	}


}

