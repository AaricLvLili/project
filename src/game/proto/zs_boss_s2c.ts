// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class boss_info_data extends Sproto.SprotoTypeBase {
		
		public bossId: number; // tag 0
		public kill: boolean; // tag 1
		public challengeIn: boolean; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bossId = this.de.ri ();
					break;
				case 1:
					this.kill = this.de.rb ();
					break;
				case 2:
					this.challengeIn = this.de.rb ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bossId != undefined) {
				this.se.wi (this.bossId, 0);
			}

			if (this.kill != undefined) {
				this.se.wb (this.kill, 1);
			}

			if (this.challengeIn != undefined) {
				this.se.wb (this.challengeIn, 2);
			}

			return this.se.Close ();
		}
	}


	export class boss_rank_info extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public names: string; // tag 1
		public shanghai: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.names = this.de.rs ();
					break;
				case 2:
					this.shanghai = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.names != undefined) {
				this.se.ws (this.names, 1);
			}

			if (this.shanghai != undefined) {
				this.se.wi (this.shanghai, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_world_boss_challenge_result_request extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_world_boss_open_request extends Sproto.SprotoTypeBase {
		
		public bossId: number; // tag 0
		public nextBossId: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bossId = this.de.ri ();
					break;
				case 1:
					this.nextBossId = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bossId != undefined) {
				this.se.wi (this.bossId, 0);
			}

			if (this.nextBossId != undefined) {
				this.se.wi (this.nextBossId, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_actordie_feats_request extends Sproto.SprotoTypeBase {
		
		public robName: string; // tag 0
		public berobName: string; // tag 1
		public feats: number; // tag 2
		public totalFeats: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.robName = this.de.rs ();
					break;
				case 1:
					this.berobName = this.de.rs ();
					break;
				case 2:
					this.feats = this.de.ri ();
					break;
				case 3:
					this.totalFeats = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.robName != undefined) {
				this.se.ws (this.robName, 0);
			}

			if (this.berobName != undefined) {
				this.se.ws (this.berobName, 1);
			}

			if (this.feats != undefined) {
				this.se.wi (this.feats, 2);
			}

			if (this.totalFeats != undefined) {
				this.se.wi (this.totalFeats, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_challenge_result_request extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_get_my_point_request extends Sproto.SprotoTypeBase {
		
		public point: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.point = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.point != undefined) {
				this.se.wi (this.point, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_hudun_point_request extends Sproto.SprotoTypeBase {
		
		public hudun: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.hudun = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.hudun != undefined) {
				this.se.wi (this.hudun, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_list_request extends Sproto.SprotoTypeBase {
		
		public boss_info_list: boss_info_data[]; // tag 0
		public alive_boss_num: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.boss_info_list = this.de.roa(boss_info_data);
					break;
				case 1:
					this.alive_boss_num = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.boss_info_list != undefined) {
				this.se.woa (this.boss_info_list, 0);
			}

			if (this.alive_boss_num != undefined) {
				this.se.wi (this.alive_boss_num, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_lottery_info_request extends Sproto.SprotoTypeBase {
		
		public lotteryItemId: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.lotteryItemId = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.lotteryItemId != undefined) {
				this.se.wi (this.lotteryItemId, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_open_request extends Sproto.SprotoTypeBase {
		
		public bossId: number; // tag 0
		public nextBossId: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bossId = this.de.ri ();
					break;
				case 1:
					this.nextBossId = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bossId != undefined) {
				this.se.wi (this.bossId, 0);
			}

			if (this.nextBossId != undefined) {
				this.se.wi (this.nextBossId, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_rank_info_request extends Sproto.SprotoTypeBase {
		
		public bossId: number; // tag 0
		public rank_list: boss_rank_info[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bossId = this.de.ri ();
					break;
				case 1:
					this.rank_list = this.de.roa(boss_rank_info);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bossId != undefined) {
				this.se.wi (this.bossId, 0);
			}

			if (this.rank_list != undefined) {
				this.se.woa (this.rank_list, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_remain_time_request extends Sproto.SprotoTypeBase {
		
		public remain_time: number; // tag 0
		public relive_time: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.remain_time = this.de.ri ();
					break;
				case 1:
					this.relive_time = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.remain_time != undefined) {
				this.se.wi (this.remain_time, 0);
			}

			if (this.relive_time != undefined) {
				this.se.wi (this.relive_time, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_talk_max_point_request extends Sproto.SprotoTypeBase {
		
		public point: number; // tag 0
		public name: string; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.point = this.de.ri ();
					break;
				case 1:
					this.name = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.point != undefined) {
				this.se.wi (this.point, 0);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_zs_boss_win_result_request extends Sproto.SprotoTypeBase {
		
		public first: string; // tag 0
		public kill: string; // tag 1
		public myrank: number; // tag 2
		public rewardDatas: reward_data[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.first = this.de.rs ();
					break;
				case 1:
					this.kill = this.de.rs ();
					break;
				case 2:
					this.myrank = this.de.ri ();
					break;
				case 3:
					this.rewardDatas = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.first != undefined) {
				this.se.ws (this.first, 0);
			}

			if (this.kill != undefined) {
				this.se.ws (this.kill, 1);
			}

			if (this.myrank != undefined) {
				this.se.wi (this.myrank, 2);
			}

			if (this.rewardDatas != undefined) {
				this.se.woa (this.rewardDatas, 3);
			}

			return this.se.Close ();
		}
	}


}

