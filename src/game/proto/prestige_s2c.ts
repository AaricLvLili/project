// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class prestige_rank_data extends Sproto.SprotoTypeBase {
		
		public actorData: actor_base_data; // tag 2
		public subRole: rank_subrole[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 2:
					this.actorData = this.de.ro(actor_base_data);
					break;
				case 3:
					this.subRole = this.de.roa(rank_subrole);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actorData != undefined) {
				this.se.wo (this.actorData, 2);
			}

			if (this.subRole != undefined) {
				this.se.woa (this.subRole, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_prestige_rank_topthree_request extends Sproto.SprotoTypeBase {
		
		public actorList: prestige_rank_data[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.actorList = this.de.roa(prestige_rank_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.actorList != undefined) {
				this.se.woa (this.actorList, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_prestige_uplevel_result_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			return this.se.Close ();
		}
	}


}

