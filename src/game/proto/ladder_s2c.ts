// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class rank_data_ladder extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public player: string; // tag 1
		public challgeLevel: number; // tag 2
		public challgeId: number; // tag 3
		public winNum: number; // tag 4
		public job: number; // tag 5
		public sex: number; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.player = this.de.rs ();
					break;
				case 2:
					this.challgeLevel = this.de.ri ();
					break;
				case 3:
					this.challgeId = this.de.ri ();
					break;
				case 4:
					this.winNum = this.de.ri ();
					break;
				case 5:
					this.job = this.de.ri ();
					break;
				case 6:
					this.sex = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.player != undefined) {
				this.se.ws (this.player, 1);
			}

			if (this.challgeLevel != undefined) {
				this.se.wi (this.challgeLevel, 2);
			}

			if (this.challgeId != undefined) {
				this.se.wi (this.challgeId, 3);
			}

			if (this.winNum != undefined) {
				this.se.wi (this.winNum, 4);
			}

			if (this.job != undefined) {
				this.se.wi (this.job, 5);
			}

			if (this.sex != undefined) {
				this.se.wi (this.sex, 6);
			}

			return this.se.Close ();
		}
	}


	export class record_data_ladder extends Sproto.SprotoTypeBase {
		
		public recordType: number; // tag 0
		public isWin: number; // tag 1
		public recordTime: number; // tag 2
		public name: string; // tag 3
		public power: number; // tag 4
		public awardType: number; // tag 5
		public zhuansheng_lv: number; // tag 6
		public lv: number; // tag 7
		public constructor(buffer: Uint8Array = null) {
			super(8, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.recordType = this.de.ri ();
					break;
				case 1:
					this.isWin = this.de.ri ();
					break;
				case 2:
					this.recordTime = this.de.ri ();
					break;
				case 3:
					this.name = this.de.rs ();
					break;
				case 4:
					this.power = this.de.ri ();
					break;
				case 5:
					this.awardType = this.de.ri ();
					break;
				case 6:
					this.zhuansheng_lv = this.de.ri ();
					break;
				case 7:
					this.lv = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.recordType != undefined) {
				this.se.wi (this.recordType, 0);
			}

			if (this.isWin != undefined) {
				this.se.wi (this.isWin, 1);
			}

			if (this.recordTime != undefined) {
				this.se.wi (this.recordTime, 2);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 3);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 4);
			}

			if (this.awardType != undefined) {
				this.se.wi (this.awardType, 5);
			}

			if (this.zhuansheng_lv != undefined) {
				this.se.wi (this.zhuansheng_lv, 6);
			}

			if (this.lv != undefined) {
				this.se.wi (this.lv, 7);
			}

			return this.se.Close ();
		}
	}


	export class sc_ladder_buy_count_request extends Sproto.SprotoTypeBase {
		
		public todayBuyTime: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.todayBuyTime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.todayBuyTime != undefined) {
				this.se.wi (this.todayBuyTime, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_ladder_get_record_request extends Sproto.SprotoTypeBase {
		
		public recordList: record_data_ladder[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.recordList = this.de.roa(record_data_ladder);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.recordList != undefined) {
				this.se.woa (this.recordList, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_ladder_info_request extends Sproto.SprotoTypeBase {
		
		public isOpen: boolean; // tag 0
		public level: number; // tag 1
		public nowId: number; // tag 2
		public challgeNum: number; // tag 3
		public challgeCd: number; // tag 4
		public winNum: number; // tag 5
		public lianWin: boolean; // tag 6
		public playUpTime: boolean; // tag 7
		public isCanReward: boolean; // tag 8
		public upLevel: number; // tag 9
		public upId: number; // tag 10
		public upWin: number; // tag 11
		public rank: number; // tag 12
		public constructor(buffer: Uint8Array = null) {
			super(13, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.isOpen = this.de.rb ();
					break;
				case 1:
					this.level = this.de.ri ();
					break;
				case 2:
					this.nowId = this.de.ri ();
					break;
				case 3:
					this.challgeNum = this.de.ri ();
					break;
				case 4:
					this.challgeCd = this.de.ri ();
					break;
				case 5:
					this.winNum = this.de.ri ();
					break;
				case 6:
					this.lianWin = this.de.rb ();
					break;
				case 7:
					this.playUpTime = this.de.rb ();
					break;
				case 8:
					this.isCanReward = this.de.rb ();
					break;
				case 9:
					this.upLevel = this.de.ri ();
					break;
				case 10:
					this.upId = this.de.ri ();
					break;
				case 11:
					this.upWin = this.de.ri ();
					break;
				case 12:
					this.rank = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.isOpen != undefined) {
				this.se.wb (this.isOpen, 0);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 1);
			}

			if (this.nowId != undefined) {
				this.se.wi (this.nowId, 2);
			}

			if (this.challgeNum != undefined) {
				this.se.wi (this.challgeNum, 3);
			}

			if (this.challgeCd != undefined) {
				this.se.wi (this.challgeCd, 4);
			}

			if (this.winNum != undefined) {
				this.se.wi (this.winNum, 5);
			}

			if (this.lianWin != undefined) {
				this.se.wb (this.lianWin, 6);
			}

			if (this.playUpTime != undefined) {
				this.se.wb (this.playUpTime, 7);
			}

			if (this.isCanReward != undefined) {
				this.se.wb (this.isCanReward, 8);
			}

			if (this.upLevel != undefined) {
				this.se.wi (this.upLevel, 9);
			}

			if (this.upId != undefined) {
				this.se.wi (this.upId, 10);
			}

			if (this.upWin != undefined) {
				this.se.wi (this.upWin, 11);
			}

			if (this.rank != undefined) {
				this.se.wi (this.rank, 12);
			}

			return this.se.Close ();
		}
	}


	export class sc_ladder_player_back_request extends Sproto.SprotoTypeBase {
		
		public type: boolean; // tag 0
		public id: number; // tag 1
		public name: string; // tag 2
		public job: number; // tag 3
		public sex: number; // tag 4
		public level: number; // tag 5
		public step: number; // tag 6
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.rb ();
					break;
				case 1:
					this.id = this.de.ri ();
					break;
				case 2:
					this.name = this.de.rs ();
					break;
				case 3:
					this.job = this.de.ri ();
					break;
				case 4:
					this.sex = this.de.ri ();
					break;
				case 5:
					this.level = this.de.ri ();
					break;
				case 6:
					this.step = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wb (this.type, 0);
			}

			if (this.id != undefined) {
				this.se.wi (this.id, 1);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 2);
			}

			if (this.job != undefined) {
				this.se.wi (this.job, 3);
			}

			if (this.sex != undefined) {
				this.se.wi (this.sex, 4);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 5);
			}

			if (this.step != undefined) {
				this.se.wi (this.step, 6);
			}

			return this.se.Close ();
		}
	}


	export class sc_ladder_rank_list_request extends Sproto.SprotoTypeBase {
		
		public upWeekRank: number; // tag 0
		public rankData: rank_data_ladder[]; // tag 1
		public upWeekRankList: rank_data_ladder[]; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.upWeekRank = this.de.ri ();
					break;
				case 1:
					this.rankData = this.de.roa(rank_data_ladder);
					break;
				case 2:
					this.upWeekRankList = this.de.roa(rank_data_ladder);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.upWeekRank != undefined) {
				this.se.wi (this.upWeekRank, 0);
			}

			if (this.rankData != undefined) {
				this.se.woa (this.rankData, 1);
			}

			if (this.upWeekRankList != undefined) {
				this.se.woa (this.upWeekRankList, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_ladder_result_request extends Sproto.SprotoTypeBase {
		
		public isWin: boolean; // tag 0
		public rewardData: reward_data[]; // tag 1
		public upLevel: number; // tag 2
		public upId: number; // tag 3
		public upStar: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.isWin = this.de.rb ();
					break;
				case 1:
					this.rewardData = this.de.roa(reward_data);
					break;
				case 2:
					this.upLevel = this.de.ri ();
					break;
				case 3:
					this.upId = this.de.ri ();
					break;
				case 4:
					this.upStar = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.isWin != undefined) {
				this.se.wb (this.isWin, 0);
			}

			if (this.rewardData != undefined) {
				this.se.woa (this.rewardData, 1);
			}

			if (this.upLevel != undefined) {
				this.se.wi (this.upLevel, 2);
			}

			if (this.upId != undefined) {
				this.se.wi (this.upId, 3);
			}

			if (this.upStar != undefined) {
				this.se.wi (this.upStar, 4);
			}

			return this.se.Close ();
		}
	}


}

