// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class rank_data extends Sproto.SprotoTypeBase {
		
		public pos: number; // tag 0
		public id: number; // tag 1
		public player: string; // tag 2
		public level: number; // tag 3
		public zhuan: number; // tag 4
		public job: number; // tag 5
		public sex: number; // tag 6
		public vip: number; // tag 7
		public month: number; // tag 8
		public power: number; // tag 9
		public count: number; // tag 10
		public challgeLevel: number; // tag 12
		public challgeId: number; // tag 13
		public winNum: number; // tag 14
		public serverId: number; // tag 15
		public value: number; // tag 16
		public constructor(buffer: Uint8Array = null) {
			super(17, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.pos = this.de.ri ();
					break;
				case 1:
					this.id = this.de.ri ();
					break;
				case 2:
					this.player = this.de.rs ();
					break;
				case 3:
					this.level = this.de.ri ();
					break;
				case 4:
					this.zhuan = this.de.ri ();
					break;
				case 5:
					this.job = this.de.ri ();
					break;
				case 6:
					this.sex = this.de.ri ();
					break;
				case 7:
					this.vip = this.de.ri ();
					break;
				case 8:
					this.month = this.de.ri ();
					break;
				case 9:
					this.power = this.de.ri ();
					break;
				case 10:
					this.count = this.de.ri ();
					break;
				case 12:
					this.challgeLevel = this.de.ri ();
					break;
				case 13:
					this.challgeId = this.de.ri ();
					break;
				case 14:
					this.winNum = this.de.ri ();
					break;
				case 15:
					this.serverId = this.de.ri ();
					break;
				case 16:
					this.value = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.pos != undefined) {
				this.se.wi (this.pos, 0);
			}

			if (this.id != undefined) {
				this.se.wi (this.id, 1);
			}

			if (this.player != undefined) {
				this.se.ws (this.player, 2);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 3);
			}

			if (this.zhuan != undefined) {
				this.se.wi (this.zhuan, 4);
			}

			if (this.job != undefined) {
				this.se.wi (this.job, 5);
			}

			if (this.sex != undefined) {
				this.se.wi (this.sex, 6);
			}

			if (this.vip != undefined) {
				this.se.wi (this.vip, 7);
			}

			if (this.month != undefined) {
				this.se.wi (this.month, 8);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 9);
			}

			if (this.count != undefined) {
				this.se.wi (this.count, 10);
			}

			if (this.challgeLevel != undefined) {
				this.se.wi (this.challgeLevel, 12);
			}

			if (this.challgeId != undefined) {
				this.se.wi (this.challgeId, 13);
			}

			if (this.winNum != undefined) {
				this.se.wi (this.winNum, 14);
			}

			if (this.serverId != undefined) {
				this.se.wi (this.serverId, 15);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 16);
			}

			return this.se.Close ();
		}
	}


	export class sc_rank_data_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public datas: rank_data[]; // tag 1
		public selfRank: number; // tag 2
		public value: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.datas = this.de.roa(rank_data);
					break;
				case 2:
					this.selfRank = this.de.ri ();
					break;
				case 3:
					this.value = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.datas != undefined) {
				this.se.woa (this.datas, 1);
			}

			if (this.selfRank != undefined) {
				this.se.wi (this.selfRank, 2);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_rank_worship_all_count_ret_request extends Sproto.SprotoTypeBase {
		
		public worshipCount: worship_count[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.worshipCount = this.de.roa(worship_count);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.worshipCount != undefined) {
				this.se.woa (this.worshipCount, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_rank_worship_data_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public count: number; // tag 1
		public actorData: actor_base_data; // tag 2
		public subRole: rank_subrole[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.count = this.de.ri ();
					break;
				case 2:
					this.actorData = this.de.ro(actor_base_data);
					break;
				case 3:
					this.subRole = this.de.roa(rank_subrole);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.count != undefined) {
				this.se.wi (this.count, 1);
			}

			if (this.actorData != undefined) {
				this.se.wo (this.actorData, 2);
			}

			if (this.subRole != undefined) {
				this.se.woa (this.subRole, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_rank_worship_success_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public count: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.count = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.count != undefined) {
				this.se.wi (this.count, 1);
			}

			return this.se.Close ();
		}
	}


	export class worship_count extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public count: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.count = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.count != undefined) {
				this.se.wi (this.count, 1);
			}

			return this.se.Close ();
		}
	}


}

