// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class item_count_base extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public count: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.count = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.count != undefined) {
				this.se.wi (this.count, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_compose_result_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_danyao_info_request extends Sproto.SprotoTypeBase {
		
		public eatCnt: number; // tag 0
		public eatTime: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.eatCnt = this.de.ri ();
					break;
				case 1:
					this.eatTime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.eatCnt != undefined) {
				this.se.wi (this.eatCnt, 0);
			}

			if (this.eatTime != undefined) {
				this.se.wi (this.eatTime, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_deal_add_item_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public data: item_data; // tag 1
		public showTip: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.data = this.de.ro(item_data);
					break;
				case 2:
					this.showTip = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.data != undefined) {
				this.se.wo (this.data, 1);
			}

			if (this.showTip != undefined) {
				this.se.wi (this.showTip, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_deal_delete_item_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public handle: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.handle = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.handle != undefined) {
				this.se.wi (this.handle, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_deal_valumn_add_request extends Sproto.SprotoTypeBase {
		
		public bagNum: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.bagNum = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.bagNum != undefined) {
				this.se.wi (this.bagNum, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_get_tendraw_equip_request extends Sproto.SprotoTypeBase {
		
		public handle: number[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wia (this.handle, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_get_ticket_equip_request extends Sproto.SprotoTypeBase {
		
		public handle: number[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wia (this.handle, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_get_treasure_equip_request extends Sproto.SprotoTypeBase {
		
		public handle: number[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wia (this.handle, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_init_data_request extends Sproto.SprotoTypeBase {
		
		public code: number; // tag 0
		public type: number; // tag 1
		public datas: item_data[]; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.code = this.de.ri ();
					break;
				case 1:
					this.type = this.de.ri ();
					break;
				case 2:
					this.datas = this.de.roa(item_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.code != undefined) {
				this.se.wi (this.code, 0);
			}

			if (this.type != undefined) {
				this.se.wi (this.type, 1);
			}

			if (this.datas != undefined) {
				this.se.woa (this.datas, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_mix_item_back_request extends Sproto.SprotoTypeBase {
		
		public result: number; // tag 0
		public useitemid: number; // tag 1
		public useitemcount: number; // tag 2
		public newitems: item_count_base[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.ri ();
					break;
				case 1:
					this.useitemid = this.de.ri ();
					break;
				case 2:
					this.useitemcount = this.de.ri ();
					break;
				case 3:
					this.newitems = this.de.roa(item_count_base);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wi (this.result, 0);
			}

			if (this.useitemid != undefined) {
				this.se.wi (this.useitemid, 1);
			}

			if (this.useitemcount != undefined) {
				this.se.wi (this.useitemcount, 2);
			}

			if (this.newitems != undefined) {
				this.se.woa (this.newitems, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_update_item_data_request extends Sproto.SprotoTypeBase {
		
		public type: number; // tag 0
		public handle: number; // tag 1
		public num: number; // tag 2
		public showTip: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.type = this.de.ri ();
					break;
				case 1:
					this.handle = this.de.ri ();
					break;
				case 2:
					this.num = this.de.ri ();
					break;
				case 3:
					this.showTip = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.type != undefined) {
				this.se.wi (this.type, 0);
			}

			if (this.handle != undefined) {
				this.se.wi (this.handle, 1);
			}

			if (this.num != undefined) {
				this.se.wi (this.num, 2);
			}

			if (this.showTip != undefined) {
				this.se.wi (this.showTip, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_bag_user_item_back_request extends Sproto.SprotoTypeBase {
		
		public tipIndex: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.tipIndex = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.tipIndex != undefined) {
				this.se.wi (this.tipIndex, 0);
			}

			return this.se.Close ();
		}
	}


}

