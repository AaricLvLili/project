// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class artifact_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public level: number; // tag 1
		public strenglv: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.level = this.de.ri ();
					break;
				case 2:
					this.strenglv = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 1);
			}

			if (this.strenglv != undefined) {
				this.se.wi (this.strenglv, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_artifact_datas_request extends Sproto.SprotoTypeBase {
		
		public datas: artifact_data[]; // tag 0
		public curid: number; // tag 1
		public conid: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.datas = this.de.roa(artifact_data);
					break;
				case 1:
					this.curid = this.de.ri ();
					break;
				case 2:
					this.conid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.datas != undefined) {
				this.se.woa (this.datas, 0);
			}

			if (this.curid != undefined) {
				this.se.wi (this.curid, 1);
			}

			if (this.conid != undefined) {
				this.se.wi (this.conid, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_artifact_progress_res_request extends Sproto.SprotoTypeBase {
		
		public curid: number; // tag 0
		public conid: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.curid = this.de.ri ();
					break;
				case 1:
					this.conid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.curid != undefined) {
				this.se.wi (this.curid, 0);
			}

			if (this.conid != undefined) {
				this.se.wi (this.conid, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_artifact_stone_res_request extends Sproto.SprotoTypeBase {
		
		public curid: number; // tag 0
		public conid: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.curid = this.de.ri ();
					break;
				case 1:
					this.conid = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.curid != undefined) {
				this.se.wi (this.curid, 0);
			}

			if (this.conid != undefined) {
				this.se.wi (this.conid, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_artifact_uplevel_result_request extends Sproto.SprotoTypeBase {
		
		public result: boolean; // tag 0
		public data: artifact_data; // tag 1
		public uptype: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.rb ();
					break;
				case 1:
					this.data = this.de.ro(artifact_data);
					break;
				case 2:
					this.uptype = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wb (this.result, 0);
			}

			if (this.data != undefined) {
				this.se.wo (this.data, 1);
			}

			if (this.uptype != undefined) {
				this.se.wi (this.uptype, 2);
			}

			return this.se.Close ();
		}
	}


}

