// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class active_ring_data extends Sproto.SprotoTypeBase {
		
		public configId: number; // tag 0
		public zslevel: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.configId = this.de.ri ();
					break;
				case 1:
					this.zslevel = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.configId != undefined) {
				this.se.wi (this.configId, 0);
			}

			if (this.zslevel != undefined) {
				this.se.wi (this.zslevel, 1);
			}

			return this.se.Close ();
		}
	}


	export class ring_data extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public level: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.level = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 1);
			}

			return this.se.Close ();
		}
	}


	export class ring_soul_slot_data extends Sproto.SprotoTypeBase {
		
		public slotIndex: number; // tag 0
		public itemData: item_data; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.slotIndex = this.de.ri ();
					break;
				case 1:
					this.itemData = this.de.ro(item_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.slotIndex != undefined) {
				this.se.wi (this.slotIndex, 0);
			}

			if (this.itemData != undefined) {
				this.se.wo (this.itemData, 1);
			}

			return this.se.Close ();
		}
	}


	export class ring_task extends Sproto.SprotoTypeBase {
		
		public id: number; // tag 0
		public value: number; // tag 1
		public state: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.id = this.de.ri ();
					break;
				case 1:
					this.value = this.de.ri ();
					break;
				case 2:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.id != undefined) {
				this.se.wi (this.id, 0);
			}

			if (this.value != undefined) {
				this.se.wi (this.value, 1);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_datas_request extends Sproto.SprotoTypeBase {
		
		public datas: ring_data[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.datas = this.de.roa(ring_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.datas != undefined) {
				this.se.woa (this.datas, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_onetask_request extends Sproto.SprotoTypeBase {
		
		public task: ring_task; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.task = this.de.ro(ring_task);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.task != undefined) {
				this.se.wo (this.task, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_open_request extends Sproto.SprotoTypeBase {
		
		public ringid: number; // tag 0
		public endTime: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.ringid = this.de.ri ();
					break;
				case 1:
					this.endTime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.ringid != undefined) {
				this.se.wi (this.ringid, 0);
			}

			if (this.endTime != undefined) {
				this.se.wi (this.endTime, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_soul_data_request extends Sproto.SprotoTypeBase {
		
		public power: number; // tag 0
		public slotData: ring_soul_slot_data[]; // tag 1
		public activeSoulEvil: active_ring_data[]; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.power = this.de.ri ();
					break;
				case 1:
					this.slotData = this.de.roa(ring_soul_slot_data);
					break;
				case 2:
					this.activeSoulEvil = this.de.roa(active_ring_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.power != undefined) {
				this.se.wi (this.power, 0);
			}

			if (this.slotData != undefined) {
				this.se.woa (this.slotData, 1);
			}

			if (this.activeSoulEvil != undefined) {
				this.se.woa (this.activeSoulEvil, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_soul_evil_change_ret_request extends Sproto.SprotoTypeBase {
		
		public slotIndex: number; // tag 0
		public retCode: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.slotIndex = this.de.ri ();
					break;
				case 1:
					this.retCode = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.slotIndex != undefined) {
				this.se.wi (this.slotIndex, 0);
			}

			if (this.retCode != undefined) {
				this.se.wi (this.retCode, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_soul_evil_wash_ret_request extends Sproto.SprotoTypeBase {
		
		public slotIndex: number; // tag 0
		public retCode: number; // tag 1
		public newSoulEvilType: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.slotIndex = this.de.ri ();
					break;
				case 1:
					this.retCode = this.de.ri ();
					break;
				case 2:
					this.newSoulEvilType = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.slotIndex != undefined) {
				this.se.wi (this.slotIndex, 0);
			}

			if (this.retCode != undefined) {
				this.se.wi (this.retCode, 1);
			}

			if (this.newSoulEvilType != undefined) {
				this.se.wi (this.newSoulEvilType, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_taskinfo_request extends Sproto.SprotoTypeBase {
		
		public task: ring_task[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.task = this.de.roa(ring_task);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.task != undefined) {
				this.se.woa (this.task, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_ring_uplevel_result_request extends Sproto.SprotoTypeBase {
		
		public result: boolean; // tag 0
		public data: ring_data; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.rb ();
					break;
				case 1:
					this.data = this.de.ro(ring_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wb (this.result, 0);
			}

			if (this.data != undefined) {
				this.se.wo (this.data, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_ringboss_init_request extends Sproto.SprotoTypeBase {
		
		public chalTimes: number; // tag 0
		public refreshTimes: number; // tag 1
		public activeValue: number; // tag 2
		public bosslist: number[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.chalTimes = this.de.ri ();
					break;
				case 1:
					this.refreshTimes = this.de.ri ();
					break;
				case 2:
					this.activeValue = this.de.ri ();
					break;
				case 3:
					this.bosslist = this.de.ria ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.chalTimes != undefined) {
				this.se.wi (this.chalTimes, 0);
			}

			if (this.refreshTimes != undefined) {
				this.se.wi (this.refreshTimes, 1);
			}

			if (this.activeValue != undefined) {
				this.se.wi (this.activeValue, 2);
			}

			if (this.bosslist != undefined) {
				this.se.wia (this.bosslist, 3);
			}

			return this.se.Close ();
		}
	}


}

