// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class encounter_data extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public posIndex: number; // tag 1
		public lv: number; // tag 2
		public zsLv: number; // tag 3
		public name: string; // tag 4
		public job: number; // tag 6
		public sex: number; // tag 7
		public itemCount: number; // tag 8
		public itemId: number; // tag 9
		public state: number; // tag 10
		public redPoint: number; // tag 11
		public power: number; // tag 12
		public mainEle: number; // tag 13
		public constructor(buffer: Uint8Array = null) {
			super(14, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				case 1:
					this.posIndex = this.de.ri ();
					break;
				case 2:
					this.lv = this.de.ri ();
					break;
				case 3:
					this.zsLv = this.de.ri ();
					break;
				case 4:
					this.name = this.de.rs ();
					break;
				case 6:
					this.job = this.de.ri ();
					break;
				case 7:
					this.sex = this.de.ri ();
					break;
				case 8:
					this.itemCount = this.de.ri ();
					break;
				case 9:
					this.itemId = this.de.ri ();
					break;
				case 10:
					this.state = this.de.ri ();
					break;
				case 11:
					this.redPoint = this.de.ri ();
					break;
				case 12:
					this.power = this.de.ri ();
					break;
				case 13:
					this.mainEle = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			if (this.posIndex != undefined) {
				this.se.wi (this.posIndex, 1);
			}

			if (this.lv != undefined) {
				this.se.wi (this.lv, 2);
			}

			if (this.zsLv != undefined) {
				this.se.wi (this.zsLv, 3);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 4);
			}

			if (this.job != undefined) {
				this.se.wi (this.job, 6);
			}

			if (this.sex != undefined) {
				this.se.wi (this.sex, 7);
			}

			if (this.itemCount != undefined) {
				this.se.wi (this.itemCount, 8);
			}

			if (this.itemId != undefined) {
				this.se.wi (this.itemId, 9);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 10);
			}

			if (this.redPoint != undefined) {
				this.se.wi (this.redPoint, 11);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 12);
			}

			if (this.mainEle != undefined) {
				this.se.wi (this.mainEle, 13);
			}

			return this.se.Close ();
		}
	}


	export class encounter_data_berob extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public time: number; // tag 1
		public isWin: boolean; // tag 2
		public isRevenge: boolean; // tag 3
		public itemId: number; // tag 4
		public actorData: actor_simple_data; // tag 5
		public power: number; // tag 12
		public constructor(buffer: Uint8Array = null) {
			super(8, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				case 1:
					this.time = this.de.ri ();
					break;
				case 2:
					this.isWin = this.de.rb ();
					break;
				case 3:
					this.isRevenge = this.de.rb ();
					break;
				case 4:
					this.itemId = this.de.ri ();
					break;
				case 5:
					this.actorData = this.de.ro(actor_simple_data);
					break;
				case 12:
					this.power = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			if (this.time != undefined) {
				this.se.wi (this.time, 1);
			}

			if (this.isWin != undefined) {
				this.se.wb (this.isWin, 2);
			}

			if (this.isRevenge != undefined) {
				this.se.wb (this.isRevenge, 3);
			}

			if (this.itemId != undefined) {
				this.se.wi (this.itemId, 4);
			}

			if (this.actorData != undefined) {
				this.se.wo (this.actorData, 5);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 12);
			}

			return this.se.Close ();
		}
	}


	export class encounter_data_rob extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public time: number; // tag 1
		public isWin: boolean; // tag 2
		public itemId: number; // tag 3
		public actorData: actor_simple_data; // tag 4
		public power: number; // tag 12
		public constructor(buffer: Uint8Array = null) {
			super(7, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				case 1:
					this.time = this.de.ri ();
					break;
				case 2:
					this.isWin = this.de.rb ();
					break;
				case 3:
					this.itemId = this.de.ri ();
					break;
				case 4:
					this.actorData = this.de.ro(actor_simple_data);
					break;
				case 12:
					this.power = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			if (this.time != undefined) {
				this.se.wi (this.time, 1);
			}

			if (this.isWin != undefined) {
				this.se.wb (this.isWin, 2);
			}

			if (this.itemId != undefined) {
				this.se.wi (this.itemId, 3);
			}

			if (this.actorData != undefined) {
				this.se.wo (this.actorData, 4);
			}

			if (this.power != undefined) {
				this.se.wi (this.power, 12);
			}

			return this.se.Close ();
		}
	}


	export class encounter_item_data extends Sproto.SprotoTypeBase {
		
		public handle: number; // tag 0
		public itemId: number; // tag 1
		public timestamp: number; // tag 2
		public state: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.handle = this.de.ri ();
					break;
				case 1:
					this.itemId = this.de.ri ();
					break;
				case 2:
					this.timestamp = this.de.ri ();
					break;
				case 3:
					this.state = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.handle != undefined) {
				this.se.wi (this.handle, 0);
			}

			if (this.itemId != undefined) {
				this.se.wi (this.itemId, 1);
			}

			if (this.timestamp != undefined) {
				this.se.wi (this.timestamp, 2);
			}

			if (this.state != undefined) {
				this.se.wi (this.state, 3);
			}

			return this.se.Close ();
		}
	}


	export class encounter_news_data extends Sproto.SprotoTypeBase {
		
		public itemId: number; // tag 0
		public name: string; // tag 1
		public time: number; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.itemId = this.de.ri ();
					break;
				case 1:
					this.name = this.de.rs ();
					break;
				case 2:
					this.time = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.itemId != undefined) {
				this.se.wi (this.itemId, 0);
			}

			if (this.name != undefined) {
				this.se.ws (this.name, 1);
			}

			if (this.time != undefined) {
				this.se.wi (this.time, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_battle_result_request extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public result: number; // tag 1
		public count: number[]; // tag 2
		public rewardDatas: reward_data[]; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				case 1:
					this.result = this.de.ri ();
					break;
				case 2:
					this.count = this.de.ria ();
					break;
				case 3:
					this.rewardDatas = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			if (this.result != undefined) {
				this.se.wi (this.result, 1);
			}

			if (this.count != undefined) {
				this.se.wia (this.count, 2);
			}

			if (this.rewardDatas != undefined) {
				this.se.woa (this.rewardDatas, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_data_update_request extends Sproto.SprotoTypeBase {
		
		public prestige: number; // tag 0
		public rank: number; // tag 1
		public count: number; // tag 2
		public buyCount: number; // tag 3
		public nextRecoverTime: number; // tag 4
		public constructor(buffer: Uint8Array = null) {
			super(5, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.prestige = this.de.ri ();
					break;
				case 1:
					this.rank = this.de.ri ();
					break;
				case 2:
					this.count = this.de.ri ();
					break;
				case 3:
					this.buyCount = this.de.ri ();
					break;
				case 4:
					this.nextRecoverTime = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.prestige != undefined) {
				this.se.wi (this.prestige, 0);
			}

			if (this.rank != undefined) {
				this.se.wi (this.rank, 1);
			}

			if (this.count != undefined) {
				this.se.wi (this.count, 2);
			}

			if (this.buyCount != undefined) {
				this.se.wi (this.buyCount, 3);
			}

			if (this.nextRecoverTime != undefined) {
				this.se.wi (this.nextRecoverTime, 4);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_deal_data_request extends Sproto.SprotoTypeBase {
		
		public encounterData: encounter_data; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 1:
					this.encounterData = this.de.ro(encounter_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.encounterData != undefined) {
				this.se.wo (this.encounterData, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_del_data_request extends Sproto.SprotoTypeBase {
		
		public index: number; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.index = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.index != undefined) {
				this.se.wi (this.index, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_get_boss_award_request extends Sproto.SprotoTypeBase {
		
		public award: reward_data[]; // tag 0
		public id: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.award = this.de.roa(reward_data);
					break;
				case 1:
					this.id = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.award != undefined) {
				this.se.woa (this.award, 0);
			}

			if (this.id != undefined) {
				this.se.wi (this.id, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_inquire_record_request extends Sproto.SprotoTypeBase {
		
		public robDatas: encounter_data_rob[]; // tag 0
		public berobDatas: encounter_data_berob[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.robDatas = this.de.roa(encounter_data_rob);
					break;
				case 1:
					this.berobDatas = this.de.roa(encounter_data_berob);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.robDatas != undefined) {
				this.se.woa (this.robDatas, 0);
			}

			if (this.berobDatas != undefined) {
				this.se.woa (this.berobDatas, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_item_info_request extends Sproto.SprotoTypeBase {
		
		public itemDatas: encounter_item_data[]; // tag 1
		public redPoint: number; // tag 2
		public redPointTimestamp: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 1:
					this.itemDatas = this.de.roa(encounter_item_data);
					break;
				case 2:
					this.redPoint = this.de.ri ();
					break;
				case 3:
					this.redPointTimestamp = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.itemDatas != undefined) {
				this.se.woa (this.itemDatas, 1);
			}

			if (this.redPoint != undefined) {
				this.se.wi (this.redPoint, 2);
			}

			if (this.redPointTimestamp != undefined) {
				this.se.wi (this.redPointTimestamp, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_last_refresh_time_request extends Sproto.SprotoTypeBase {
		
		public lastTime: number; // tag 0
		public refreshTimes: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.lastTime = this.de.ri ();
					break;
				case 3:
					this.refreshTimes = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.lastTime != undefined) {
				this.se.wi (this.lastTime, 0);
			}

			if (this.refreshTimes != undefined) {
				this.se.wi (this.refreshTimes, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_my_data_request extends Sproto.SprotoTypeBase {
		
		public fame: number; // tag 0
		public rank: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.fame = this.de.ri ();
					break;
				case 1:
					this.rank = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.fame != undefined) {
				this.se.wi (this.fame, 0);
			}

			if (this.rank != undefined) {
				this.se.wi (this.rank, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_news_request extends Sproto.SprotoTypeBase {
		
		public data: encounter_news_data; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.data = this.de.ro(encounter_news_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.data != undefined) {
				this.se.wo (this.data, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_news_list_request extends Sproto.SprotoTypeBase {
		
		public datas: encounter_news_data[]; // tag 0
		public constructor(buffer: Uint8Array = null) {
			super(1, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.datas = this.de.roa(encounter_news_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.datas != undefined) {
				this.se.woa (this.datas, 0);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_open_result_request extends Sproto.SprotoTypeBase {
		
		public rewardDatas: reward_data[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 1:
					this.rewardDatas = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.rewardDatas != undefined) {
				this.se.woa (this.rewardDatas, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_player_rob_request extends Sproto.SprotoTypeBase {
		
		public name: string; // tag 0
		public itemId: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.name = this.de.rs ();
					break;
				case 1:
					this.itemId = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.name != undefined) {
				this.se.ws (this.name, 0);
			}

			if (this.itemId != undefined) {
				this.se.wi (this.itemId, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_update_will_boss_request extends Sproto.SprotoTypeBase {
		
		public configID: number; // tag 0
		public refreshCd: number; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.configID = this.de.ri ();
					break;
				case 1:
					this.refreshCd = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.configID != undefined) {
				this.se.wi (this.configID, 0);
			}

			if (this.refreshCd != undefined) {
				this.se.wi (this.refreshCd, 1);
			}

			return this.se.Close ();
		}
	}


	export class sc_encounter_will_boss_result_request extends Sproto.SprotoTypeBase {
		
		public result: boolean; // tag 0
		public award: reward_data[]; // tag 1
		public constructor(buffer: Uint8Array = null) {
			super(2, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.result = this.de.rb ();
					break;
				case 1:
					this.award = this.de.roa(reward_data);
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.result != undefined) {
				this.se.wb (this.result, 0);
			}

			if (this.award != undefined) {
				this.se.woa (this.award, 1);
			}

			return this.se.Close ();
		}
	}


}

