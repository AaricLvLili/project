// Generated by sprotodump. DO NOT EDIT!

namespace Sproto { 
	export class sc_yb_turntable_info_request extends Sproto.SprotoTypeBase {
		
		public activityId: number; // tag 0
		public level: number; // tag 1
		public chargeRecord: number; // tag 3
		public constructor(buffer: Uint8Array = null) {
			super(4, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.activityId = this.de.ri ();
					break;
				case 1:
					this.level = this.de.ri ();
					break;
				case 3:
					this.chargeRecord = this.de.ri ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.activityId != undefined) {
				this.se.wi (this.activityId, 0);
			}

			if (this.level != undefined) {
				this.se.wi (this.level, 1);
			}

			if (this.chargeRecord != undefined) {
				this.se.wi (this.chargeRecord, 3);
			}

			return this.se.Close ();
		}
	}


	export class sc_yb_turntable_msg_request extends Sproto.SprotoTypeBase {
		
		public name: string; // tag 0
		public count: number; // tag 1
		public rate: string; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.name = this.de.rs ();
					break;
				case 1:
					this.count = this.de.ri ();
					break;
				case 2:
					this.rate = this.de.rs ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.name != undefined) {
				this.se.ws (this.name, 0);
			}

			if (this.count != undefined) {
				this.se.wi (this.count, 1);
			}

			if (this.rate != undefined) {
				this.se.ws (this.rate, 2);
			}

			return this.se.Close ();
		}
	}


	export class sc_yb_turntable_roll_start_cb_request extends Sproto.SprotoTypeBase {
		
		public activityId: number; // tag 0
		public resultId: number; // tag 1
		public result: boolean; // tag 2
		public constructor(buffer: Uint8Array = null) {
			super(3, buffer);
		}

		protected Decode (): void {
			let tag = -1;
			while (-1 != (tag = this.de.rt())) {
				switch (tag) {
				case 0:
					this.activityId = this.de.ri ();
					break;
				case 1:
					this.resultId = this.de.ri ();
					break;
				case 2:
					this.result = this.de.rb ();
					break;
				default:
					this.de.ReadUnknowData ();
					break;
				}
			}
		}

		public EncodeStream (stream: Sproto.SprotoStream): number {
			this.se.Open (stream);

			if (this.activityId != undefined) {
				this.se.wi (this.activityId, 0);
			}

			if (this.resultId != undefined) {
				this.se.wi (this.resultId, 1);
			}

			if (this.result != undefined) {
				this.se.wb (this.result, 2);
			}

			return this.se.Close ();
		}
	}


}

